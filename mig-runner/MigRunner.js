// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
DateTools.getMonthDays = function(d) {
	var month = d.getMonth();
	var year = d.getFullYear();
	if(month != 1) {
		return DateTools.DAYS_OF_MONTH[month];
	}
	var isB = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	if(isB) {
		return 29;
	} else {
		return 28;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	,__class__: haxe_io_Input
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
var acerola_mig_MigRunner = function() {
	var args = process.argv.slice(2);
	if(args.length == 0) {
		return;
	}
	try {
		var runnerJson = args[0];
		this.data = JSON.parse(runnerJson);
		var validator = new acerola_mig_data_MigRunnerDataValidator();
		validator.validate(this.data);
	} catch( _g ) {
		var e = haxe_Exception.caught(_g);
		new _$Sys_FileOutput(2).writeString("Input inválido: " + Std.string(e) + "\n");
		process.exit(1);
	}
	var connection = { host : process.env["MIGRATION_HOST"], user : process.env["MIGRATION_USER"], password : process.env["MIGRATION_PASSWORD"], port : Std.parseInt(process.env["MIGRATION_PORT"]), auto_json_parse : true};
	this.mig = new migration_Migration(this.data.uuid);
	var _g = 0;
	var _g1 = this.data.steps;
	while(_g < _g1.length) {
		var step = _g1[_g];
		++_g;
		this.mig.add(step.hash,step.up);
	}
	var _g = this.mig;
	var onSuccess = $bind(this,this.onSuccess);
	var onFail = $bind(this,this.onError);
	var tmp = function() {
		_g.up(onSuccess,onFail);
	};
	this.mig.connectDatabase(connection,tmp,$bind(this,this.onError));
};
acerola_mig_MigRunner.__name__ = true;
acerola_mig_MigRunner.main = function() {
	new acerola_mig_MigRunner();
};
acerola_mig_MigRunner.prototype = {
	onSuccess: function() {
		process.exit(0);
	}
	,onError: function(error) {
		new _$Sys_FileOutput(2).writeString(error);
		process.exit(1);
	}
	,__class__: acerola_mig_MigRunner
};
var anonstruct_AnonStruct = function() {
	this._validateFunc = [];
	this.currentStruct = null;
	this._allowNull = false;
	this.propMap = new haxe_ds_StringMap();
};
anonstruct_AnonStruct.__name__ = true;
anonstruct_AnonStruct.prototype = {
	addValidation: function(func) {
		this._validateFunc.push(func);
	}
	,valueBool: function() {
		var value = new anonstruct__$AnonStruct_AnonPropBool();
		this.currentStruct = value;
		return value;
	}
	,valueString: function() {
		var value = new anonstruct__$AnonStruct_AnonPropString();
		this.currentStruct = value;
		return value;
	}
	,valueInt: function() {
		var value = new anonstruct__$AnonStruct_AnonPropInt();
		this.currentStruct = value;
		return value;
	}
	,valueFloat: function() {
		var value = new anonstruct__$AnonStruct_AnonPropFloat();
		this.currentStruct = value;
		return value;
	}
	,valueArray: function() {
		var value = new anonstruct__$AnonStruct_AnonPropArray();
		this.currentStruct = value;
		return value;
	}
	,valueDate: function() {
		var value = new anonstruct__$AnonStruct_AnonPropDate();
		this.currentStruct = value;
		return value;
	}
	,valueObject: function() {
		var value = new anonstruct__$AnonStruct_AnonPropObject();
		this.currentStruct = value;
		return value;
	}
	,valueFunction: function() {
		var value = new anonstruct__$AnonStruct_AnonPropFunction();
		this.currentStruct = value;
		return value;
	}
	,refuseNull: function() {
		this._allowNull = false;
	}
	,allowNull: function() {
		this._allowNull = true;
	}
	,propertyInt: function(prop) {
		var propInt = new anonstruct__$AnonStruct_AnonPropInt();
		this.propMap.h[prop] = propInt;
		return propInt;
	}
	,propertyFloat: function(prop) {
		var propFloat = new anonstruct__$AnonStruct_AnonPropFloat();
		this.propMap.h[prop] = propFloat;
		return propFloat;
	}
	,propertyString: function(prop) {
		var propString = new anonstruct__$AnonStruct_AnonPropString();
		this.propMap.h[prop] = propString;
		return propString;
	}
	,propertyObject: function(prop) {
		var propObject = new anonstruct__$AnonStruct_AnonPropObject();
		this.propMap.h[prop] = propObject;
		return propObject;
	}
	,propertyArray: function(prop) {
		var propArray = new anonstruct__$AnonStruct_AnonPropArray();
		this.propMap.h[prop] = propArray;
		return propArray;
	}
	,propertyDate: function(prop) {
		var propDate = new anonstruct__$AnonStruct_AnonPropDate();
		this.propMap.h[prop] = propDate;
		return propDate;
	}
	,propertyBool: function(prop) {
		var propBool = new anonstruct__$AnonStruct_AnonPropBool();
		this.propMap.h[prop] = propBool;
		return propBool;
	}
	,propertyFunction: function(prop) {
		var propFunction = new anonstruct__$AnonStruct_AnonPropFunction();
		this.propMap.h[prop] = propFunction;
		return propFunction;
	}
	,validateAll: function(data,stopOnFirstError) {
		if(stopOnFirstError == null) {
			stopOnFirstError = false;
		}
		this.validateTree(data,stopOnFirstError,[]);
	}
	,validateTree: function(data,stopOnFirstError,tree) {
		if(stopOnFirstError == null) {
			stopOnFirstError = false;
		}
		if(tree == null) {
			tree = [];
		}
		var errors = [];
		var addDynamicError = function(e,possibleLabel,possibleKey) {
			if(((e) instanceof Array)) {
				var erroList = e;
				var _g = 0;
				while(_g < erroList.length) {
					var item = erroList[_g];
					++_g;
					if(((item) instanceof anonstruct_AnonStructError)) {
						errors.push(item);
					} else {
						errors.push(new anonstruct_AnonStructError(possibleLabel,possibleKey,Std.string(e)));
					}
				}
			} else if(((e) instanceof anonstruct_AnonStructError)) {
				errors.push(e);
			} else {
				errors.push(new anonstruct_AnonStructError(possibleLabel,possibleKey,Std.string(e)));
			}
			if(stopOnFirstError) {
				throw haxe_Exception.thrown(errors);
			}
		};
		if(data == null && !this._allowNull) {
			addDynamicError(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED,"",tree.join("."));
		} else {
			try {
				if(this.currentStruct != null) {
					this.currentStruct.validate(data,tree);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				addDynamicError(e,this.currentStruct.propLabel,tree.join("."));
			}
			var h = this.propMap.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var value = null;
				try {
					value = Reflect.getProperty(data,key);
				} catch( _g ) {
				}
				var tempTree = tree.concat([key]);
				try {
					this.propMap.h[key].validate(value,tempTree);
				} catch( _g1 ) {
					var e = haxe_Exception.caught(_g1).unwrap();
					addDynamicError(e,this.propMap.h[key].propLabel,tempTree.join("."));
				}
			}
			var _g = 0;
			var _g1 = this._validateFunc;
			while(_g < _g1.length) {
				var func = _g1[_g];
				++_g;
				try {
					func(data);
				} catch( _g2 ) {
					var e = haxe_Exception.caught(_g2).unwrap();
					addDynamicError(e,"",tree.join("."));
				}
			}
		}
		if(errors.length > 0) {
			throw haxe_Exception.thrown(errors);
		}
	}
	,validate: function(data) {
		try {
			this.validateAll(data,true);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			var arr = e;
			throw haxe_Exception.thrown(e[0]);
		}
	}
	,getErrors: function(data) {
		try {
			this.validateAll(data);
			return [];
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			var arr = e;
			return arr;
		}
	}
	,pass: function(data) {
		try {
			this.validate(data);
			return true;
		} catch( _g ) {
			return false;
		}
	}
	,__class__: anonstruct_AnonStruct
};
var acerola_mig_data_MigRunnerDataValidator = function() {
	anonstruct_AnonStruct.call(this);
	this.propertyString("uuid").refuseNull().refuseEmpty().addValidation(function(value) {
		if(!util_kit_uuid_UUID.isValid(value)) {
			throw haxe_Exception.thrown("Invalid UUID format");
		}
	});
	this.propertyArray("steps").refuseNull().minLen(1).setStructClass(acerola_mig_data_MigRunnerStepDataValidator);
};
acerola_mig_data_MigRunnerDataValidator.__name__ = true;
acerola_mig_data_MigRunnerDataValidator.__super__ = anonstruct_AnonStruct;
acerola_mig_data_MigRunnerDataValidator.prototype = $extend(anonstruct_AnonStruct.prototype,{
	__class__: acerola_mig_data_MigRunnerDataValidator
});
var acerola_mig_data_MigRunnerStepDataValidator = function() {
	anonstruct_AnonStruct.call(this);
	this.propertyString("up").refuseNull().refuseEmpty();
	this.propertyString("hash").refuseNull().refuseEmpty();
};
acerola_mig_data_MigRunnerStepDataValidator.__name__ = true;
acerola_mig_data_MigRunnerStepDataValidator.__super__ = anonstruct_AnonStruct;
acerola_mig_data_MigRunnerStepDataValidator.prototype = $extend(anonstruct_AnonStruct.prototype,{
	__class__: acerola_mig_data_MigRunnerStepDataValidator
});
var anonstruct_AnonMessages = function() { };
anonstruct_AnonMessages.__name__ = true;
anonstruct_AnonMessages.setLanguage_PT_BR = function() {
	anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED = "O valor não pode ser nulo";
	anonstruct_AnonMessages.DATE_VALUE_INVALID = "O valor deve ser uma data válida";
	anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE = "A data deve ser anterior a ?VALUE0";
	anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE_OR_EQUAL = "A data deve ser anterior ou igual a ?VALUE0";
	anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER = "A data deve ser posterior a ?VALUE0";
	anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER_OR_EQUAL = "A data deve ser posterior ou igual a ?VALUE0";
	anonstruct_AnonMessages.ARRAY_VALUE_INVALID = "O valor esperado deve ser um array";
	anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_SINGLE = "O array deve ter pelo menos 1 item";
	anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_PLURAL = "O array deve ter pelo menos ?VALUE0 itens";
	anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_SINGLE = "O array deve ter no máximo 1 item";
	anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_PLURAL = "O array deve ter no máximo ?VALUE0 itens";
	anonstruct_AnonMessages.STRING_VALUE_INVALID = "O valor deve ser um texto";
	anonstruct_AnonMessages.STRING_VALUE_CANNOT_BE_EMPTY = "O texto não pode ser vazio";
	anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_SINGLE = "O texto deve ter pelo menos 1 caractere";
	anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_PLURAL = "O texto deve ter pelo menos ?VALUE0 caracteres";
	anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_SINGLE = "O texto deve ter no máximo 1 caractere";
	anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_PLURAL = "O texto deve ter no máximo ?VALUE0 caracteres";
	anonstruct_AnonMessages.STRING_VALUE_SHOULD_STARTS_WITH = "O texto deve começar com ?VALUE0";
	anonstruct_AnonMessages.STRING_VALUE_SHOULD_ENDS_WITH = "O texto deve terminar em ?VALUE0";
	anonstruct_AnonMessages.STRING_VALUE_CHAR_NOT_ALLOWED = "O caractere ?VALUE0 não é permitido";
	anonstruct_AnonMessages.STRING_VALUE_OPTION_NOT_ALLOWED = "'?VALUE0' não é um valor permitido. Os valores aceitos são: ?VALUE1";
	anonstruct_AnonMessages.INT_VALUE_INVALID = "O valor deve ser um número inteiro";
	anonstruct_AnonMessages.INT_VALUE_GREATER_THAN = "O valor deve ser maior que ?VALUE0";
	anonstruct_AnonMessages.INT_VALUE_GREATER_OR_EQUAL_THAN = "O valor deve ser maior ou igual a ?VALUE0";
	anonstruct_AnonMessages.INT_VALUE_LESS_THAN = "O valor deve ser menor que ?VALUE0";
	anonstruct_AnonMessages.INT_VALUE_LESS_OR_EQUAL_THAN = "O valor deve ser menor ou igual a ?VALUE0";
	anonstruct_AnonMessages.FLOAT_VALUE_INVALID = "O valor deve ser um número";
	anonstruct_AnonMessages.FLOAT_VALUE_GREATER_THAN = "O valor deve ser maior que ?VALUE0";
	anonstruct_AnonMessages.FLOAT_VALUE_GREATER_OR_EQUAL_THAN = "O valor deve ser maior ou igual a ?VALUE0";
	anonstruct_AnonMessages.FLOAT_VALUE_LESS_THAN = "O valor deve ser menor que ?VALUE0";
	anonstruct_AnonMessages.FLOAT_VALUE_LESS_OR_EQUAL_THAN = "O valor deve ser menor ou igual a ?VALUE0";
	anonstruct_AnonMessages.BOOL_VALUE_INVALID = "O valor deve ser booleano";
	anonstruct_AnonMessages.BOOL_VALUE_EXPECTED = "O valor esperado era ?VALUE0";
	anonstruct_AnonMessages.OBJECT_VALUE_INVALID = "O valor deve ser um objeto";
	anonstruct_AnonMessages.FUNCTION_VALUE_INVALID = "O valor deve ser uma função";
};
var anonstruct__$AnonStruct_AnonProp = function() {
	this.propLabel = "";
	this._validateFunc = [];
};
anonstruct__$AnonStruct_AnonProp.__name__ = true;
anonstruct__$AnonStruct_AnonProp.prototype = {
	validate: function(value,tree) {
	}
	,validateFuncs: function(val) {
		var _g = 0;
		var _g1 = this._validateFunc;
		while(_g < _g1.length) {
			var func = _g1[_g];
			++_g;
			func(val);
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonProp
};
var anonstruct__$AnonStruct_AnonPropDate = function() {
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropDate.__name__ = true;
anonstruct__$AnonStruct_AnonPropDate.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropDate.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,validateFuncs: function(val) {
		var currVal = val;
		var _g = 0;
		var _g1 = this._validateFunc;
		while(_g < _g1.length) {
			var func = _g1[_g];
			++_g;
			var currFunc = func;
			currFunc(currVal);
		}
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,greaterOrEqualThan: function(date) {
		this._minDate = date;
		this._minEqual = true;
		return this;
	}
	,greaterThan: function(date) {
		this._minDate = date;
		this._minEqual = false;
		return this;
	}
	,lessThan: function(date) {
		this._minDate = date;
		this._maxEqual = false;
		return this;
	}
	,lessOrEqualThan: function(date) {
		this._minDate = date;
		this._maxEqual = true;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isDateTime: function(value) {
		if(((value) instanceof Date)) {
			return true;
		} else if(typeof(value) == "string") {
			try {
				datetime_utils_DateTimeUtils.fromString(value);
				return true;
			} catch( _g ) {
			}
		} else if(typeof(value) == "number") {
			try {
				var this1 = value + 62135596800.0;
				return true;
			} catch( _g ) {
			}
		}
		return false;
	}
	,validate_min: function(value,min,equal) {
		if(!(min == null || (equal == null || !equal) && value - 62135596800.0 > min - 62135596800.0)) {
			if(equal) {
				return value - 62135596800.0 >= min - 62135596800.0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_max: function(value,max,equal) {
		if(!(max == null || (equal == null || !equal) && value - 62135596800.0 < max - 62135596800.0)) {
			if(equal) {
				return value - 62135596800.0 <= max - 62135596800.0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(!this.validate_isDateTime(value)) {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.DATE_VALUE_INVALID);
			} else {
				var date = typeof(value) == "string" ? datetime_utils_DateTimeUtils.fromString(value) : Math.floor(value.getTime() / 1000) + 62135596800.0;
				var min = this._minDate;
				var equal = this._minEqual;
				if(!(min == null || (equal == null || !equal) && date - 62135596800.0 > min - 62135596800.0 || equal && date - 62135596800.0 >= min - 62135596800.0)) {
					throw haxe_Exception.thrown((this._minEqual ? anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE_OR_EQUAL : anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE).split("?VALUE0").join(datetime_DateTime.toString(this._minDate)));
				}
				var max = this._maxDate;
				var equal = this._maxEqual;
				if(!(max == null || (equal == null || !equal) && date - 62135596800.0 < max - 62135596800.0 || equal && date - 62135596800.0 <= max - 62135596800.0)) {
					throw haxe_Exception.thrown((this._maxEqual ? anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER_OR_EQUAL : anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER).split("?VALUE0").join(datetime_DateTime.toString(this._maxDate)));
				}
				this.validateFuncs(date);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropDate
});
var anonstruct__$AnonStruct_AnonPropArray = function() {
	this._childStructClassParams = null;
	this._childStructClass = null;
	this._childStruct = null;
	this._allowNull = false;
	this._minLen = null;
	this._maxLen = null;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropArray.__name__ = true;
anonstruct__$AnonStruct_AnonPropArray.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropArray.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	minLen: function(len) {
		this._minLen = len;
		return this;
	}
	,maxLen: function(len) {
		this._maxLen = len;
		return this;
	}
	,addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,setStruct: function(structure) {
		this._childStruct = structure;
		return this;
	}
	,setStructClass: function(structureClass,params) {
		this._childStructClass = structureClass;
		this._childStructClassParams = params == null ? [] : params;
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isArray: function(value) {
		return ((value) instanceof Array);
	}
	,validate_minLen: function(value,minLen) {
		if(!(minLen == null || minLen < 0)) {
			return value.length >= minLen;
		} else {
			return true;
		}
	}
	,validate_maxLen: function(value,maxLen) {
		if(!(maxLen == null || maxLen < 0)) {
			return value.length <= maxLen;
		} else {
			return true;
		}
	}
	,validate: function(value,tree) {
		if(tree == null) {
			tree = [];
		}
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(!((value) instanceof Array)) {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.ARRAY_VALUE_INVALID);
			} else {
				var val = value;
				var minLen = this._minLen;
				if(!(minLen == null || minLen < 0 || val.length >= minLen)) {
					throw haxe_Exception.thrown((this._minLen <= 1 ? anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_SINGLE : anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_PLURAL).split("?VALUE0").join(Std.string(this._minLen)));
				}
				var maxLen = this._maxLen;
				if(!(maxLen == null || maxLen < 0 || val.length <= maxLen)) {
					throw haxe_Exception.thrown((this._maxLen <= 1 ? anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_SINGLE : anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_PLURAL).split("?VALUE0").join(Std.string(this._maxLen)));
				}
				if(this._childStruct != null) {
					var _g = 0;
					var _g1 = val.length;
					while(_g < _g1) {
						var i = _g++;
						var item = val[i];
						this._childStruct.validateTree(item,null,tree.concat(["[" + i + "]"]));
					}
				}
				if(this._childStructClass != null) {
					var _g = 0;
					var _g1 = val.length;
					while(_g < _g1) {
						var i = _g++;
						var item = val[i];
						var struct = Type.createInstance(this._childStructClass,this._childStructClassParams);
						struct.validateTree(item,null,tree.concat(["[" + i + "]"]));
					}
				}
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropArray
});
var anonstruct__$AnonStruct_AnonPropObject = function() {
	this._childStructClassParams = null;
	this._childStructClass = null;
	this._struct = null;
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropObject.__name__ = true;
anonstruct__$AnonStruct_AnonPropObject.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropObject.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,setStruct: function(structure) {
		this._struct = structure;
		return this;
	}
	,setStructClass: function(structureClass,params) {
		this._childStructClass = structureClass;
		this._childStructClassParams = params == null ? [] : params;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isObject: function(value) {
		if(value == null || typeof(value) == "string" || typeof(value) == "number" || typeof(value) == "boolean" || ((value) instanceof Array) || js_Boot.__instanceof(value,Class) || Reflect.isFunction(value)) {
			return false;
		}
		return true;
	}
	,validate: function(value,tree) {
		if(tree == null) {
			tree = [];
		}
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(!(value == null || typeof(value) == "string" || typeof(value) == "number" || typeof(value) == "boolean" || ((value) instanceof Array) || js_Boot.__instanceof(value,Class) || Reflect.isFunction(value) ? false : true)) {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.OBJECT_VALUE_INVALID);
			} else {
				if(this._struct != null) {
					this._struct.validateTree(value,null,tree.slice());
				}
				if(this._childStructClass != null) {
					var struct = Type.createInstance(this._childStructClass,this._childStructClassParams);
					struct.validateTree(value,null,tree.slice());
				}
				this.validateFuncs(value);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropObject
});
var anonstruct__$AnonStruct_AnonPropString = function() {
	this._allowedOptionsMatchCase = false;
	this._allowedOptions = null;
	this._allowedChars = null;
	this._endsWidth = null;
	this._startsWith = null;
	this._minChar = null;
	this._maxChar = null;
	this._allowEmpty = false;
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropString.__name__ = true;
anonstruct__$AnonStruct_AnonPropString.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropString.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	setAllowedOptions: function(values,matchCase) {
		if(matchCase == null) {
			matchCase = true;
		}
		this._allowedOptions = values;
		this._allowedOptionsMatchCase = matchCase;
		return this;
	}
	,addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,startsWith: function(value) {
		this._startsWith = value;
		return this;
	}
	,endsWith: function(value) {
		this._endsWidth = value;
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,refuseEmpty: function() {
		this._allowEmpty = false;
		return this;
	}
	,allowEmpty: function() {
		this._allowEmpty = true;
		return this;
	}
	,maxChar: function(chars) {
		this._maxChar = chars;
		return this;
	}
	,minChar: function(chars) {
		this._minChar = chars;
		return this;
	}
	,allowChars: function(chars) {
		this._allowedChars = chars;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isString: function(value) {
		return typeof(value) == "string";
	}
	,validate_isEmpty: function(value) {
		return StringTools.trim(value).length == 0;
	}
	,validate_allowedEmpty: function(value,allowEmpty) {
		var len = StringTools.trim(value).length;
		if(len <= 0) {
			if(len == 0) {
				return allowEmpty == true;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_minChar: function(value,minChar) {
		if(!(minChar == null || minChar < 0)) {
			return value.length >= minChar;
		} else {
			return true;
		}
	}
	,validate_maxChar: function(value,maxChar) {
		if(!(maxChar == null || maxChar < 0)) {
			return value.length <= maxChar;
		} else {
			return true;
		}
	}
	,validate_startsWith: function(value,startsWith) {
		if(!(startsWith == null || startsWith.length == 0)) {
			return StringTools.startsWith(value,startsWith);
		} else {
			return true;
		}
	}
	,validate_endsWith: function(value,endsWith) {
		if(!(endsWith == null || endsWith.length == 0)) {
			return StringTools.endsWith(value,endsWith);
		} else {
			return true;
		}
	}
	,validate_allowedChars: function(value,allowedChars) {
		var result = "";
		if(allowedChars != null && allowedChars.length > 0) {
			var _g = 0;
			var _g1 = value.length;
			while(_g < _g1) {
				var i = _g++;
				if(allowedChars.indexOf(value.charAt(i)) == -1) {
					result = value.charAt(i);
					break;
				}
			}
		}
		return result;
	}
	,validate_allowedOptions: function(value,options,matchCase) {
		if(options == null || options.length == 0) {
			return true;
		} else if(matchCase) {
			return options.indexOf(value) > -1;
		} else {
			var _g = 0;
			while(_g < options.length) {
				var item = options[_g];
				++_g;
				if(item.toLowerCase() == value.toLowerCase()) {
					return true;
				}
			}
			return false;
		}
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(typeof(value) != "string") {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_INVALID);
			} else {
				var val = value;
				var allowEmpty = this._allowEmpty;
				var len = StringTools.trim(val).length;
				if(!(len > 0 || len == 0 && allowEmpty == true)) {
					throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_CANNOT_BE_EMPTY);
				}
				if(StringTools.trim(val).length != 0) {
					var minChar = this._minChar;
					if(!(minChar == null || minChar < 0 || val.length >= minChar)) {
						throw haxe_Exception.thrown((this._minChar <= 1 ? anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_SINGLE : anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_PLURAL).split("?VALUE0").join(Std.string(this._minChar)));
					}
					var maxChar = this._maxChar;
					if(!(maxChar == null || maxChar < 0 || val.length <= maxChar)) {
						throw haxe_Exception.thrown((this._maxChar <= 1 ? anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_SINGLE : anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_PLURAL).split("?VALUE0").join(Std.string(this._maxChar)));
					}
					var startsWith = this._startsWith;
					if(!(startsWith == null || startsWith.length == 0 || StringTools.startsWith(val,startsWith))) {
						throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_SHOULD_STARTS_WITH.split("?VALUE0").join(this._startsWith));
					}
					var endsWith = this._endsWidth;
					if(!(endsWith == null || endsWith.length == 0 || StringTools.endsWith(val,endsWith))) {
						throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_SHOULD_ENDS_WITH.split("?VALUE0").join(this._endsWidth));
					}
					var allowedChars = this._allowedChars;
					var result = "";
					if(allowedChars != null && allowedChars.length > 0) {
						var _g = 0;
						var _g1 = val.length;
						while(_g < _g1) {
							var i = _g++;
							if(allowedChars.indexOf(val.charAt(i)) == -1) {
								result = val.charAt(i);
								break;
							}
						}
					}
					var char = result;
					if(char.length > 0) {
						throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_CHAR_NOT_ALLOWED.split("?VALUE0").join(char));
					}
					if(!this.validate_allowedOptions(val,this._allowedOptions,this._allowedOptionsMatchCase)) {
						throw haxe_Exception.thrown(anonstruct_AnonMessages.STRING_VALUE_OPTION_NOT_ALLOWED.split("?VALUE0").join(val).split("?VALUE1").join(this._allowedOptions.join(", ")));
					}
				}
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropString
});
var anonstruct__$AnonStruct_AnonPropInt = function() {
	this._minEqual = false;
	this._maxEqual = false;
	this._min = null;
	this._max = null;
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropInt.__name__ = true;
anonstruct__$AnonStruct_AnonPropInt.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropInt.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,lessThan: function(maxValue) {
		this._max = maxValue;
		this._maxEqual = false;
		return this;
	}
	,lessOrEqualThan: function(maxValue) {
		this._max = maxValue;
		this._maxEqual = true;
		return this;
	}
	,greaterThan: function(minValue) {
		this._min = minValue;
		this._minEqual = false;
		return this;
	}
	,greaterOrEqualThan: function(minValue) {
		this._min = minValue;
		this._minEqual = true;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isInt: function(value) {
		if(typeof(value) == "number") {
			return ((value | 0) === value);
		} else {
			return false;
		}
	}
	,validate_min: function(value,min,equal) {
		if(!(min == null || (equal == null || !equal) && value > min)) {
			if(equal) {
				return value >= min;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_max: function(value,max,equal) {
		if(!(max == null || (equal == null || !equal) && value < max)) {
			if(equal) {
				return value <= max;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(!(typeof(value) == "number" && ((value | 0) === value))) {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.INT_VALUE_INVALID);
			} else {
				var val = value;
				var min = this._min;
				var equal = this._minEqual;
				if(!(min == null || (equal == null || !equal) && val > min || equal && val >= min)) {
					throw haxe_Exception.thrown((this._minEqual ? anonstruct_AnonMessages.INT_VALUE_GREATER_OR_EQUAL_THAN : anonstruct_AnonMessages.INT_VALUE_GREATER_THAN).split("?VALUE0").join(Std.string(this._min)));
				}
				var max = this._max;
				var equal = this._maxEqual;
				if(!(max == null || (equal == null || !equal) && val < max || equal && val <= max)) {
					throw haxe_Exception.thrown((this._maxEqual ? anonstruct_AnonMessages.INT_VALUE_LESS_OR_EQUAL_THAN : anonstruct_AnonMessages.INT_VALUE_LESS_THAN).split("?VALUE0").join(Std.string(this._max)));
				}
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropInt
});
var anonstruct__$AnonStruct_AnonPropFloat = function() {
	this._minEqual = false;
	this._maxEqual = false;
	this._min = null;
	this._max = null;
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropFloat.__name__ = true;
anonstruct__$AnonStruct_AnonPropFloat.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropFloat.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,lessThan: function(maxValue) {
		this._max = maxValue;
		this._maxEqual = false;
		return this;
	}
	,lessOrEqualThan: function(maxValue) {
		this._max = maxValue;
		this._maxEqual = true;
		return this;
	}
	,greaterThan: function(minValue) {
		this._min = minValue;
		this._minEqual = false;
		return this;
	}
	,greaterOrEqualThan: function(minValue) {
		this._min = minValue;
		this._minEqual = true;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isFloat: function(value) {
		return typeof(value) == "number";
	}
	,validate_min: function(value,min,equal) {
		if(!(min == null || (equal == null || !equal) && value > min)) {
			if(equal) {
				return value >= min;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_max: function(value,max,equal) {
		if(!(max == null || (equal == null || !equal) && value < max)) {
			if(equal) {
				return value <= max;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(typeof(value) != "number") {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.FLOAT_VALUE_INVALID);
			} else {
				var val = value;
				var min = this._min;
				var equal = this._minEqual;
				if(!(min == null || (equal == null || !equal) && val > min || equal && val >= min)) {
					throw haxe_Exception.thrown((this._minEqual ? anonstruct_AnonMessages.INT_VALUE_GREATER_OR_EQUAL_THAN : anonstruct_AnonMessages.INT_VALUE_GREATER_THAN).split("?VALUE0").join(Std.string(this._min)));
				}
				var max = this._max;
				var equal = this._maxEqual;
				if(!(max == null || (equal == null || !equal) && val < max || equal && val <= max)) {
					throw haxe_Exception.thrown((this._maxEqual ? anonstruct_AnonMessages.INT_VALUE_LESS_OR_EQUAL_THAN : anonstruct_AnonMessages.INT_VALUE_LESS_THAN).split("?VALUE0").join(Std.string(this._max)));
				}
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropFloat
});
var anonstruct__$AnonStruct_AnonPropBool = function() {
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropBool.__name__ = true;
anonstruct__$AnonStruct_AnonPropBool.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropBool.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,expectedValue: function(value) {
		this._expectedValue = value;
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isBool: function(value) {
		return typeof(value) == "boolean";
	}
	,validate_expected: function(value,expected) {
		if(expected != null) {
			if(expected != null) {
				return value == expected;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(typeof(value) != "boolean") {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.BOOL_VALUE_INVALID);
			} else {
				var val = value;
				var expected = this._expectedValue;
				if(!(expected == null || expected != null && val == expected)) {
					throw haxe_Exception.thrown(anonstruct_AnonMessages.BOOL_VALUE_EXPECTED.split("?VALUE0").join(this._expectedValue ? "true" : "false"));
				}
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropBool
});
var anonstruct__$AnonStruct_AnonPropFunction = function() {
	this._allowNull = false;
	anonstruct__$AnonStruct_AnonProp.call(this);
};
anonstruct__$AnonStruct_AnonPropFunction.__name__ = true;
anonstruct__$AnonStruct_AnonPropFunction.__super__ = anonstruct__$AnonStruct_AnonProp;
anonstruct__$AnonStruct_AnonPropFunction.prototype = $extend(anonstruct__$AnonStruct_AnonProp.prototype,{
	addErrorLabel: function(label) {
		this.propLabel = label;
		return this;
	}
	,addValidation: function(func) {
		this._validateFunc.push(func);
		return this;
	}
	,refuseNull: function() {
		this._allowNull = false;
		return this;
	}
	,allowNull: function() {
		this._allowNull = true;
		return this;
	}
	,validate_allowedNull: function(value,allowNull) {
		if(value == null) {
			if(value == null) {
				return allowNull;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,validate_isFunction: function(value) {
		return Reflect.isFunction(value);
	}
	,validate: function(value,tree) {
		anonstruct__$AnonStruct_AnonProp.prototype.validate.call(this,value,tree);
		if(!(value != null || value == null && this._allowNull)) {
			throw haxe_Exception.thrown(anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED);
		} else if(value != null) {
			if(!Reflect.isFunction(value)) {
				throw haxe_Exception.thrown(anonstruct_AnonMessages.FUNCTION_VALUE_INVALID);
			} else {
				var val = value;
				this.validateFuncs(val);
			}
		}
	}
	,__class__: anonstruct__$AnonStruct_AnonPropFunction
});
var anonstruct_AnonStructError = function(label,property,errorMessage) {
	this.label = label;
	this.property = property;
	this.errorMessage = errorMessage;
	if(this.label == null) {
		this.label = "";
	}
};
anonstruct_AnonStructError.__name__ = true;
anonstruct_AnonStructError.prototype = {
	toString: function() {
		if(this.property != "") {
			return this.property + ": " + this.errorMessage;
		} else {
			return this.errorMessage;
		}
	}
	,toStringFriendly: function() {
		if(this.label != "") {
			return this.label + ": " + this.errorMessage;
		} else {
			return this.errorMessage;
		}
	}
	,__class__: anonstruct_AnonStructError
};
var datetime_DTPeriod = $hxEnums["datetime.DTPeriod"] = { __ename__:true,__constructs__:null
	,Year: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Year",$_.__params__ = ["n"],$_)
	,Month: ($_=function(n) { return {_hx_index:1,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Month",$_.__params__ = ["n"],$_)
	,Day: ($_=function(n) { return {_hx_index:2,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Day",$_.__params__ = ["n"],$_)
	,Hour: ($_=function(n) { return {_hx_index:3,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Hour",$_.__params__ = ["n"],$_)
	,Minute: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Minute",$_.__params__ = ["n"],$_)
	,Second: ($_=function(n) { return {_hx_index:5,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Second",$_.__params__ = ["n"],$_)
	,Week: ($_=function(n) { return {_hx_index:6,n:n,__enum__:"datetime.DTPeriod",toString:$estr}; },$_._hx_name="Week",$_.__params__ = ["n"],$_)
};
datetime_DTPeriod.__constructs__ = [datetime_DTPeriod.Year,datetime_DTPeriod.Month,datetime_DTPeriod.Day,datetime_DTPeriod.Hour,datetime_DTPeriod.Minute,datetime_DTPeriod.Second,datetime_DTPeriod.Week];
var datetime_DTSnap = $hxEnums["datetime.DTSnap"] = { __ename__:true,__constructs__:null
	,Year: ($_=function(direction) { return {_hx_index:0,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Year",$_.__params__ = ["direction"],$_)
	,Month: ($_=function(direction) { return {_hx_index:1,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Month",$_.__params__ = ["direction"],$_)
	,Day: ($_=function(direction) { return {_hx_index:2,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Day",$_.__params__ = ["direction"],$_)
	,Hour: ($_=function(direction) { return {_hx_index:3,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Hour",$_.__params__ = ["direction"],$_)
	,Minute: ($_=function(direction) { return {_hx_index:4,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Minute",$_.__params__ = ["direction"],$_)
	,Second: ($_=function(direction) { return {_hx_index:5,direction:direction,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Second",$_.__params__ = ["direction"],$_)
	,Week: ($_=function(direction,day) { return {_hx_index:6,direction:direction,day:day,__enum__:"datetime.DTSnap",toString:$estr}; },$_._hx_name="Week",$_.__params__ = ["direction","day"],$_)
};
datetime_DTSnap.__constructs__ = [datetime_DTSnap.Year,datetime_DTSnap.Month,datetime_DTSnap.Day,datetime_DTSnap.Hour,datetime_DTSnap.Minute,datetime_DTSnap.Second,datetime_DTSnap.Week];
var datetime_DateTime = {};
datetime_DateTime.now = function() {
	return Math.floor(new Date().getTime() / 1000) + 62135596800.0;
};
datetime_DateTime.local = function() {
	var utc = Math.floor(new Date().getTime() / 1000) + 62135596800.0;
	return utc - 62135596800.0 + datetime_DateTime.getLocalOffset() + 62135596800.0;
};
datetime_DateTime.make = function(year,month,day,hour,minute,second) {
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 1;
	}
	if(year == null) {
		year = 1970;
	}
	return datetime_utils_DateTimeUtils.yearToStamp(year) + datetime_utils_DateTimeMonthUtils.toSeconds(month,year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + (day - 1) * 86400 + hour * 3600 + minute * 60 + second - 62135596800.0 + 62135596800.0;
};
datetime_DateTime.fromTime = function(time) {
	return time + 62135596800.0;
};
datetime_DateTime.fromString = function(str) {
	return datetime_utils_DateTimeUtils.fromString(str);
};
datetime_DateTime.fromDate = function(date) {
	return Math.floor(date.getTime() / 1000) + 62135596800.0;
};
datetime_DateTime.daysInMonth = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return datetime_utils_DateTimeMonthUtils.days(month,isLeapYear);
};
datetime_DateTime.weeksInYear = function(year) {
	var start = datetime_utils_DateTimeUtils.yearToStamp(year) - 62135596800.0 + 62135596800.0;
	var weekDay = datetime_DateTime.getWeekDay(start);
	if(weekDay == 4 || weekDay == 3 && datetime_DateTime.isLeapYear(start)) {
		return 53;
	} else {
		return 52;
	}
};
datetime_DateTime.isLeap = function(year) {
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
datetime_DateTime.getLocalOffset = function() {
	var now = new Date();
	var year = now.getFullYear();
	var month = now.getMonth() + 1;
	var day = now.getDate();
	var hour = now.getHours();
	var minute = now.getMinutes();
	var second = now.getSeconds();
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 1;
	}
	if(year == null) {
		year = 1970;
	}
	var local = datetime_utils_DateTimeUtils.yearToStamp(year) + datetime_utils_DateTimeMonthUtils.toSeconds(month,year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + (day - 1) * 86400 + hour * 3600 + minute * 60 + second - 62135596800.0 + 62135596800.0;
	return local - 62135596800.0 - (now.getTime() / 1000 | 0) | 0;
};
datetime_DateTime._new = function(time) {
	return time + 62135596800.0;
};
datetime_DateTime.utc = function(this1) {
	return this1 - 62135596800.0 - datetime_DateTime.getLocalOffset() + 62135596800.0;
};
datetime_DateTime.getYear = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	return (cquads / 12622780800.0 | 0) * 400 + (centuries / 3155673600.0 | 0) * 100 + (quads / 126230400.0 | 0) * 4 + (years == 4 ? years : years + 1);
};
datetime_DateTime.yearStart = function(this1) {
	var cquads = (this1 / 12622780800.0 | 0) * 12622780800.0;
	var centuries = ((this1 - cquads) / 3155673600.0 | 0) * 3155673600.0;
	if(centuries > 9467020800.) {
		centuries -= 3155673600.0;
	}
	var quads = ((this1 - cquads - centuries) / 126230400.0 | 0) * 126230400.0;
	var years = (this1 - cquads - centuries - quads) / 31536000 | 0;
	if(years == 4) {
		--years;
	}
	return cquads + centuries + quads + years * 31536000 - 62135596800.0;
};
datetime_DateTime.monthStart = function(this1,month) {
	if(month == null) {
		month = 0;
	}
	if(month == 0) {
		var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
		month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	}
	return datetime_DateTime.yearStart(this1) + datetime_utils_DateTimeMonthUtils.toSeconds(month,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getMonthStart = function(this1,month) {
	return datetime_DateTime.monthStart(this1,month) + 62135596800.0;
};
datetime_DateTime.isLeapYear = function(this1) {
	var year = datetime_DateTime.getYear(this1);
	if(year % 4 == 0) {
		if(year % 100 == 0) {
			return year % 400 == 0;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
datetime_DateTime.getMonth = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	return datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getDay = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	return datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.daysInThisMonth = function(this1) {
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	return datetime_utils_DateTimeMonthUtils.days(month,month == 2 && datetime_DateTime.isLeapYear(this1));
};
datetime_DateTime.getYearDay = function(this1) {
	return ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
};
datetime_DateTime.weeksInThisYear = function(this1) {
	return datetime_DateTime.weeksInYear(datetime_DateTime.getYear(this1));
};
datetime_DateTime.getWeekDay = function(this1,mondayBased) {
	if(mondayBased == null) {
		mondayBased = false;
	}
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	var a = (14 - month) / 12 | 0;
	var y = datetime_DateTime.getYear(this1) - a;
	var m = month + 12 * a - 2;
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var weekDay = (7000 + (datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1)) + y + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + (31 * m / 12 | 0))) % 7;
	if(mondayBased && weekDay == 0) {
		return 7;
	} else {
		return weekDay;
	}
};
datetime_DateTime.getWeekDayNum = function(this1,weekDay,num) {
	if(num == null) {
		num = 1;
	}
	return datetime_utils_DateTimeUtils.getWeekDayNum(this1 - 62135596800.0 + 62135596800.0,weekDay,num) + 62135596800.0;
};
datetime_DateTime.getWeek = function(this1) {
	var week = (((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1 - datetime_DateTime.getWeekDay(this1,true) + 10) / 7 | 0;
	var year = datetime_DateTime.getYear(this1);
	if(week < 1) {
		return datetime_DateTime.weeksInYear(year - 1);
	} else if(week > 52 && week > datetime_DateTime.weeksInYear(year)) {
		return 1;
	} else {
		return week;
	}
};
datetime_DateTime.getHour = function(this1) {
	return (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
};
datetime_DateTime.getHour12 = function(this1) {
	var hour = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
	if(hour == 0) {
		return 12;
	} else if(hour > 12) {
		return hour - 12;
	} else {
		return hour;
	}
};
datetime_DateTime.getMinute = function(this1) {
	return (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
};
datetime_DateTime.getSecond = function(this1) {
	return this1 - Math.floor(this1 / 60) * 60 | 0;
};
datetime_DateTime.add = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var n = period.n;
		time = datetime_utils_DateTimeUtils.addYear(this1 - 62135596800.0 + 62135596800.0,n);
		break;
	case 1:
		var n = period.n;
		time = datetime_utils_DateTimeUtils.addMonth(this1 - 62135596800.0 + 62135596800.0,n);
		break;
	case 2:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 86400;
		break;
	case 3:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 3600;
		break;
	case 4:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 60;
		break;
	case 5:
		var n = period.n;
		time = this1 - 62135596800.0 + n;
		break;
	case 6:
		var n = period.n;
		time = this1 - 62135596800.0 + n * 7 * 86400;
		break;
	}
	return time + 62135596800.0;
};
datetime_DateTime.sub = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var n = period.n;
		time = datetime_utils_DateTimeUtils.addYear(this1 - 62135596800.0 + 62135596800.0,-n);
		break;
	case 1:
		var n = period.n;
		time = datetime_utils_DateTimeUtils.addMonth(this1 - 62135596800.0 + 62135596800.0,-n);
		break;
	case 2:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 86400;
		break;
	case 3:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 3600;
		break;
	case 4:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 60;
		break;
	case 5:
		var n = period.n;
		time = this1 - 62135596800.0 - n;
		break;
	case 6:
		var n = period.n;
		time = this1 - 62135596800.0 - n * 7 * 86400;
		break;
	}
	return time + 62135596800.0;
};
datetime_DateTime.snap = function(this1,period) {
	var time;
	switch(period._hx_index) {
	case 0:
		var d = period.direction;
		time = datetime_utils_DateTimeSnapUtils.snapYear(this1 - 62135596800.0 + 62135596800.0,d);
		break;
	case 1:
		var d = period.direction;
		time = datetime_utils_DateTimeSnapUtils.snapMonth(this1 - 62135596800.0 + 62135596800.0,d);
		break;
	case 2:
		var d = period.direction;
		time = datetime_utils_DateTimeSnapUtils.snapDay(this1 - 62135596800.0 + 62135596800.0,d);
		break;
	case 3:
		var d = period.direction;
		time = datetime_utils_DateTimeSnapUtils.snapHour(this1 - 62135596800.0 + 62135596800.0,d);
		break;
	case 4:
		var d = period.direction;
		time = datetime_utils_DateTimeSnapUtils.snapMinute(this1 - 62135596800.0 + 62135596800.0,d);
		break;
	case 5:
		var d = period.direction;
		time = d == 1 ? this1 - 62135596800.0 + 1 : this1 - 62135596800.0;
		break;
	case 6:
		var d = period.direction;
		var day = period.day;
		time = datetime_utils_DateTimeSnapUtils.snapWeek(this1 - 62135596800.0 + 62135596800.0,d,day);
		break;
	}
	return time + 62135596800.0;
};
datetime_DateTime.toString = function(this1) {
	var Y = datetime_DateTime.getYear(this1);
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var M = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
	var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
	var D = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
	var h = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
	var m = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
	var s = this1 - Math.floor(this1 / 60) * 60 | 0;
	return "" + Y + "-" + (M < 10 ? "0" + M : "" + M) + "-" + (D < 10 ? "0" + D : "" + D) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (m < 10 ? "0" + m : "" + m) + ":" + (s < 10 ? "0" + s : "" + s);
};
datetime_DateTime.format = function(this1,format) {
	return datetime_utils_DateTimeUtils.strftime(this1 - 62135596800.0 + 62135596800.0,format);
};
datetime_DateTime.getTime = function(this1) {
	return this1 - 62135596800.0;
};
datetime_DateTime.getDate = function(this1) {
	return new Date((this1 - 62135596800.0) * 1000);
};
datetime_DateTime.gt = function(this1,dt) {
	return this1 - 62135596800.0 > dt - 62135596800.0;
};
datetime_DateTime.gte = function(this1,dt) {
	return this1 - 62135596800.0 >= dt - 62135596800.0;
};
datetime_DateTime.lt = function(this1,dt) {
	return this1 - 62135596800.0 < dt - 62135596800.0;
};
datetime_DateTime.lte = function(this1,dt) {
	return this1 - 62135596800.0 <= dt - 62135596800.0;
};
datetime_DateTime.eq = function(this1,dt) {
	return this1 - 62135596800.0 == dt - 62135596800.0;
};
datetime_DateTime.neq = function(this1,dt) {
	return this1 - 62135596800.0 != dt - 62135596800.0;
};
datetime_DateTime.mathPlus1 = function(this1,period) {
	return datetime_DateTime.add(this1,period);
};
datetime_DateTime.mathPlus2 = function(this1,period) {
	return datetime_DateTime.add(this1,period);
};
datetime_DateTime.mathPlus3 = function(this1,period) {
	this1 = datetime_DateTime.add(this1,period) - 62135596800.0 + 62135596800.0;
	return this1 + 62135596800.0;
};
datetime_DateTime.mathMinus1 = function(this1,period) {
	return datetime_DateTime.sub(this1,period);
};
datetime_DateTime.mathMinus2 = function(this1,period) {
	this1 = datetime_DateTime.sub(this1,period) - 62135596800.0 + 62135596800.0;
	return this1 + 62135596800.0;
};
datetime_DateTime.dtiCreate = function(this1,begin) {
	return datetime_DateTimeInterval.create(begin,this1 - 62135596800.0 + 62135596800.0);
};
datetime_DateTime.dtiMinus = function(this1,dti) {
	return datetime_DateTimeInterval.subFrom(dti,this1 - 62135596800.0 + 62135596800.0);
};
datetime_DateTime.dtiPlus1 = function(this1,dti) {
	return datetime_DateTimeInterval.addTo(dti,this1 - 62135596800.0 + 62135596800.0);
};
datetime_DateTime.dtiPlus2 = function(this1,dti) {
	return datetime_DateTimeInterval.addTo(dti,this1 - 62135596800.0 + 62135596800.0);
};
datetime_DateTime.dtiMinus2 = function(this1,dti) {
	this1 = datetime_DateTimeInterval.subFrom(dti,this1 - 62135596800.0 + 62135596800.0) - 62135596800.0 + 62135596800.0;
	return this1 + 62135596800.0;
};
datetime_DateTime.dtiPlus3 = function(this1,dti) {
	this1 = datetime_DateTimeInterval.addTo(dti,this1 - 62135596800.0 + 62135596800.0) - 62135596800.0 + 62135596800.0;
	return this1 + 62135596800.0;
};
var datetime_DateTimeInterval = {};
datetime_DateTimeInterval.create = function(begin,end) {
	var dtic = new datetime_cores_DateTimeIntervalCore();
	dtic.begin = end - 62135596800.0 < begin - 62135596800.0 ? end : begin;
	dtic.end = end - 62135596800.0 < begin - 62135596800.0 ? begin : end;
	dtic.negative = end - 62135596800.0 < begin - 62135596800.0;
	return dtic;
};
datetime_DateTimeInterval._new = function(dtic) {
	return dtic;
};
datetime_DateTimeInterval.invert = function(this1) {
	this1.negative = !this1.negative;
	return this1;
};
datetime_DateTimeInterval.addTo = function(this1,dt) {
	return dt - 62135596800.0 + (this1.negative ? -1 : 1) * (this1.end - 62135596800.0 - (this1.begin - 62135596800.0)) + 62135596800.0;
};
datetime_DateTimeInterval.subFrom = function(this1,dt) {
	return dt - 62135596800.0 - (this1.negative ? -1 : 1) * (this1.end - 62135596800.0 - (this1.begin - 62135596800.0)) + 62135596800.0;
};
datetime_DateTimeInterval.toString = function(this1) {
	var years = this1.getYears();
	var months = this1.getMonths();
	var days = this1.getDays();
	var hours = this1.getHours();
	var minutes = this1.getMinutes();
	var seconds = this1.getSeconds();
	var parts = [];
	if(years != 0) {
		parts.push("" + years + "y");
	}
	if(months != 0) {
		parts.push("" + months + "m");
	}
	if(days != 0) {
		parts.push("" + days + "d");
	}
	if(hours != 0) {
		parts.push("" + hours + "hrs");
	}
	if(minutes != 0) {
		parts.push("" + minutes + "min");
	}
	if(seconds != 0) {
		parts.push("" + seconds + "sec");
	}
	return (this1.negative ? "-" : "") + "(" + (parts.length == 0 ? "0sec" : parts.join(", ")) + ")";
};
datetime_DateTimeInterval.sign = function(this1) {
	if(this1.negative) {
		return -1;
	} else {
		return 1;
	}
};
datetime_DateTimeInterval.format = function(this1,format) {
	return datetime_utils_DateTimeIntervalUtils.strftime(this1,format);
};
datetime_DateTimeInterval.formatPartial = function(this1,format) {
	return datetime_utils_DateTimeIntervalUtils.formatPartial(this1,format);
};
datetime_DateTimeInterval.eq = function(this1,dtic) {
	if(this1.negative == dtic.negative) {
		return this1.getTotalSeconds() == dtic.getTotalSeconds();
	} else {
		return false;
	}
};
datetime_DateTimeInterval.gt = function(this1,dtic) {
	if(this1.negative != dtic.negative) {
		return dtic.negative;
	}
	var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
	if(this1.negative) {
		return delta < 0;
	} else {
		return delta > 0;
	}
};
datetime_DateTimeInterval.gte = function(this1,dtic) {
	if(!(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds())) {
		if(this1.negative != dtic.negative) {
			return dtic.negative;
		} else {
			var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
			if(this1.negative) {
				return delta < 0;
			} else {
				return delta > 0;
			}
		}
	} else {
		return true;
	}
};
datetime_DateTimeInterval.lt = function(this1,dtic) {
	var tmp;
	if(!(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds())) {
		if(this1.negative != dtic.negative) {
			tmp = dtic.negative;
		} else {
			var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
			tmp = this1.negative ? delta < 0 : delta > 0;
		}
	} else {
		tmp = true;
	}
	return !tmp;
};
datetime_DateTimeInterval.lte = function(this1,dtic) {
	var tmp;
	if(this1.negative != dtic.negative) {
		tmp = dtic.negative;
	} else {
		var delta = this1.getTotalSeconds() - dtic.getTotalSeconds();
		tmp = this1.negative ? delta < 0 : delta > 0;
	}
	return !tmp;
};
datetime_DateTimeInterval.neq = function(this1,dtic) {
	return !(this1.negative == dtic.negative && this1.getTotalSeconds() == dtic.getTotalSeconds());
};
var datetime_cores_DateTimeIntervalCore = function() {
	this.seconds = -1;
	this.minutes = -1;
	this.hours = -1;
	this.days = -1;
	this.months = -1;
	this.years = -1;
	this.negative = false;
};
datetime_cores_DateTimeIntervalCore.__name__ = true;
datetime_cores_DateTimeIntervalCore.prototype = {
	getYears: function() {
		if(this.years < 0) {
			this.years = datetime_DateTime.getYear(this.end) - datetime_DateTime.getYear(this.begin);
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var m1 = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var m2 = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			if(m2 < m1) {
				this.years--;
			} else if(m1 == m2) {
				var this1 = this.begin;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				var d1 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
				var this1 = this.end;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				var d2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
				if(d2 < d1) {
					this.years--;
				} else if(d1 == d2) {
					var this1 = this.begin;
					var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
					var this1 = this.end;
					var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
					if(h2 < h1) {
						this.years--;
					} else if(h2 == h1) {
						var this1 = this.begin;
						var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
						var this1 = this.end;
						var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
						if(m2 < m1) {
							this.years--;
						} else {
							var tmp;
							if(m2 == m1) {
								var this1 = this.end;
								var this2 = this.begin;
								tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
							} else {
								tmp = false;
							}
							if(tmp) {
								this.years--;
							}
						}
					}
				}
			}
		}
		return this.years;
	}
	,getMonths: function() {
		if(this.months < 0) {
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var monthBegin = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var monthEnd = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1));
			this.months = monthBegin <= monthEnd ? monthEnd - monthBegin : 12 - monthBegin + monthEnd;
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var d1 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var d2 = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			if(d2 < d1) {
				this.months--;
			} else if(d1 == d2) {
				var this1 = this.begin;
				var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
				var this1 = this.end;
				var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
				if(h2 < h1) {
					this.months--;
				} else if(h2 == h1) {
					var this1 = this.begin;
					var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
					var this1 = this.end;
					var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
					if(m2 < m1) {
						this.months--;
					} else {
						var tmp;
						if(m2 == m1) {
							var this1 = this.end;
							var this2 = this.begin;
							tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
						} else {
							tmp = false;
						}
						if(tmp) {
							this.months--;
						}
					}
				}
			}
		}
		return this.months;
	}
	,getTotalMonths: function() {
		return this.getYears() * 12 + this.getMonths();
	}
	,getDays: function() {
		if(this.days < 0) {
			var this1 = this.begin;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var dayBegin = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var this1 = this.end;
			var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
			var dayEnd = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(this1));
			var tmp;
			if(dayBegin <= dayEnd) {
				tmp = dayEnd - dayBegin;
			} else {
				var this1 = this.begin;
				var days = ((this1 - 62135596800.0 - datetime_DateTime.yearStart(this1)) / 86400 | 0) + 1;
				tmp = datetime_utils_DateTimeMonthUtils.days(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(this1)),datetime_DateTime.isLeapYear(this.begin)) - dayBegin + dayEnd;
			}
			this.days = tmp;
			var this1 = this.begin;
			var h1 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			var this1 = this.end;
			var h2 = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			if(h2 < h1) {
				this.days--;
			} else if(h2 == h1) {
				var this1 = this.begin;
				var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
				var this1 = this.end;
				var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
				if(m2 < m1) {
					this.days--;
				} else {
					var tmp;
					if(m2 == m1) {
						var this1 = this.end;
						var this2 = this.begin;
						tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
					} else {
						tmp = false;
					}
					if(tmp) {
						this.days--;
					}
				}
			}
		}
		return this.days;
	}
	,getTotalDays: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 86400 | 0;
	}
	,getHours: function() {
		if(this.hours < 0) {
			var this1 = this.begin;
			var hourBegin = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			var this1 = this.end;
			var hourEnd = (this1 - Math.floor(this1 / 86400) * 86400) / 3600 | 0;
			this.hours = hourBegin <= hourEnd ? hourEnd - hourBegin : 24 - hourBegin + hourEnd;
			var this1 = this.begin;
			var m1 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			var this1 = this.end;
			var m2 = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			if(m2 < m1) {
				this.hours--;
			} else {
				var tmp;
				if(m2 == m1) {
					var this1 = this.end;
					var this2 = this.begin;
					tmp = (this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0);
				} else {
					tmp = false;
				}
				if(tmp) {
					this.hours--;
				}
			}
		}
		return this.hours;
	}
	,getTotalHours: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 3600 | 0;
	}
	,getMinutes: function() {
		if(this.minutes < 0) {
			var this1 = this.begin;
			var minuteBegin = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			var this1 = this.end;
			var minuteEnd = (this1 - Math.floor(this1 / 3600) * 3600) / 60 | 0;
			this.minutes = minuteBegin <= minuteEnd ? minuteEnd - minuteBegin : 60 - minuteBegin + minuteEnd;
			var this1 = this.end;
			var this2 = this.begin;
			if((this1 - Math.floor(this1 / 60) * 60 | 0) < (this2 - Math.floor(this2 / 60) * 60 | 0)) {
				this.minutes--;
			}
		}
		return this.minutes;
	}
	,getTotalMinutes: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 60 | 0;
	}
	,getSeconds: function() {
		if(this.seconds < 0) {
			var this1 = this.begin;
			var secondBegin = this1 - Math.floor(this1 / 60) * 60 | 0;
			var this1 = this.end;
			var secondEnd = this1 - Math.floor(this1 / 60) * 60 | 0;
			this.seconds = secondBegin <= secondEnd ? secondEnd - secondBegin : 60 - secondBegin + secondEnd;
		}
		return this.seconds;
	}
	,getTotalSeconds: function() {
		return this.end - 62135596800.0 - (this.begin - 62135596800.0);
	}
	,getTotalWeeks: function() {
		return (this.end - 62135596800.0 - (this.begin - 62135596800.0)) / 604800 | 0;
	}
	,__class__: datetime_cores_DateTimeIntervalCore
};
var datetime_utils_DateTimeIntervalUtils = function() {
};
datetime_utils_DateTimeIntervalUtils.__name__ = true;
datetime_utils_DateTimeIntervalUtils.strftime = function(dti,format) {
	var prevPos = 0;
	var pos = format.indexOf("%");
	var str = "";
	while(pos >= 0) {
		str += format.substring(prevPos,pos);
		++pos;
		switch(format.charCodeAt(pos)) {
		case 37:
			str += "%";
			break;
		case 68:
			str += StringTools.lpad(dti.getDays() + "","0",2);
			break;
		case 72:
			str += StringTools.lpad(dti.getHours() + "","0",2);
			break;
		case 73:
			str += StringTools.lpad(dti.getMinutes() + "","0",2);
			break;
		case 77:
			str += StringTools.lpad(dti.getMonths() + "","0",2);
			break;
		case 82:
			str += dti.negative ? "-" : "+";
			break;
		case 83:
			str += StringTools.lpad(dti.getSeconds() + "","0",2);
			break;
		case 89:
			str += StringTools.lpad(dti.getYears() + "","0",2);
			break;
		case 97:
			str += dti.getTotalDays() + "";
			break;
		case 98:
			str += dti.getTotalMonths() + "";
			break;
		case 99:
			str += dti.getTotalHours() + "";
			break;
		case 100:
			str += dti.getDays() + "";
			break;
		case 101:
			str += dti.getTotalMinutes() + "";
			break;
		case 102:
			str += dti.getTotalSeconds() + "";
			break;
		case 104:
			str += dti.getHours() + "";
			break;
		case 105:
			str += dti.getMinutes() + "";
			break;
		case 109:
			str += dti.getMonths() + "";
			break;
		case 114:
			str += dti.negative ? "-" : "";
			break;
		case 115:
			str += dti.getSeconds() + "";
			break;
		case 121:
			str += dti.getYears() + "";
			break;
		}
		prevPos = pos + 1;
		pos = format.indexOf("%",pos + 1);
	}
	str += format.substring(prevPos);
	return str;
};
datetime_utils_DateTimeIntervalUtils.formatPartial = function(dti,format) {
	var result = [];
	var pos = 0;
	var str = "";
	var _g = 0;
	var _g1 = format.length;
	while(_g < _g1) {
		var f = _g++;
		pos = format[f].indexOf("%");
		if(pos >= 0) {
			switch(format[f].charCodeAt(pos + 1)) {
			case 68:
				if(dti.getDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getDays() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 72:
				if(dti.getHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getHours() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 73:
				if(dti.getMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getMinutes() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 77:
				if(dti.getMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getMonths() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 83:
				if(dti.getSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getSeconds() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 89:
				if(dti.getYears() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + StringTools.lpad(dti.getYears() + "","0",2) + format[f].substring(pos + 2);
				break;
			case 97:
				if(dti.getTotalDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalDays() + format[f].substring(pos + 2);
				break;
			case 98:
				if(dti.getTotalMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalMonths() + format[f].substring(pos + 2);
				break;
			case 99:
				if(dti.getTotalHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalHours() + format[f].substring(pos + 2);
				break;
			case 100:
				if(dti.getDays() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getDays() + format[f].substring(pos + 2);
				break;
			case 101:
				if(dti.getTotalMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalMinutes() + format[f].substring(pos + 2);
				break;
			case 102:
				if(dti.getTotalSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getTotalSeconds() + format[f].substring(pos + 2);
				break;
			case 104:
				if(dti.getHours() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getHours() + format[f].substring(pos + 2);
				break;
			case 105:
				if(dti.getMinutes() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getMinutes() + format[f].substring(pos + 2);
				break;
			case 109:
				if(dti.getMonths() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getMonths() + format[f].substring(pos + 2);
				break;
			case 115:
				if(dti.getSeconds() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getSeconds() + format[f].substring(pos + 2);
				break;
			case 121:
				if(dti.getYears() == 0) {
					continue;
				}
				str = format[f].substring(0,pos) + dti.getYears() + format[f].substring(pos + 2);
				break;
			default:
				continue;
			}
			result.push(str);
		}
	}
	return result;
};
datetime_utils_DateTimeIntervalUtils.prototype = {
	__class__: datetime_utils_DateTimeIntervalUtils
};
var datetime_utils_DateTimeMonthUtils = function() {
};
datetime_utils_DateTimeMonthUtils.__name__ = true;
datetime_utils_DateTimeMonthUtils.days = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(month == 1) {
		return 31;
	} else if(month == 2 && isLeapYear) {
		return 29;
	} else if(month == 2) {
		return 28;
	} else if(month == 3) {
		return 31;
	} else if(month == 4) {
		return 30;
	} else if(month == 5) {
		return 31;
	} else if(month == 6) {
		return 30;
	} else if(month == 7) {
		return 31;
	} else if(month == 8) {
		return 31;
	} else if(month == 9) {
		return 30;
	} else if(month == 10) {
		return 31;
	} else if(month == 11) {
		return 30;
	} else {
		return 31;
	}
};
datetime_utils_DateTimeMonthUtils.getMonth = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return 1;
	} else if(isLeapYear) {
		if(days < 61) {
			return 2;
		} else if(days < 92) {
			return 3;
		} else if(days < 122) {
			return 4;
		} else if(days < 153) {
			return 5;
		} else if(days < 183) {
			return 6;
		} else if(days < 214) {
			return 7;
		} else if(days < 245) {
			return 8;
		} else if(days < 275) {
			return 9;
		} else if(days < 306) {
			return 10;
		} else if(days < 336) {
			return 11;
		} else {
			return 12;
		}
	} else if(days < 60) {
		return 2;
	} else if(days < 91) {
		return 3;
	} else if(days < 121) {
		return 4;
	} else if(days < 152) {
		return 5;
	} else if(days < 182) {
		return 6;
	} else if(days < 213) {
		return 7;
	} else if(days < 244) {
		return 8;
	} else if(days < 274) {
		return 9;
	} else if(days < 305) {
		return 10;
	} else if(days < 335) {
		return 11;
	} else {
		return 12;
	}
};
datetime_utils_DateTimeMonthUtils.getMonthDay = function(days,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	if(days < 32) {
		return days;
	} else if(isLeapYear) {
		if(days < 61) {
			return days - 31;
		} else if(days < 92) {
			return days - 60;
		} else if(days < 122) {
			return days - 91;
		} else if(days < 153) {
			return days - 121;
		} else if(days < 183) {
			return days - 152;
		} else if(days < 214) {
			return days - 182;
		} else if(days < 245) {
			return days - 213;
		} else if(days < 275) {
			return days - 244;
		} else if(days < 306) {
			return days - 274;
		} else if(days < 336) {
			return days - 305;
		} else {
			return days - 335;
		}
	} else if(days < 60) {
		return days - 31;
	} else if(days < 91) {
		return days - 59;
	} else if(days < 121) {
		return days - 90;
	} else if(days < 152) {
		return days - 120;
	} else if(days < 182) {
		return days - 151;
	} else if(days < 213) {
		return days - 181;
	} else if(days < 244) {
		return days - 212;
	} else if(days < 274) {
		return days - 243;
	} else if(days < 305) {
		return days - 273;
	} else if(days < 335) {
		return days - 304;
	} else {
		return days - 334;
	}
};
datetime_utils_DateTimeMonthUtils.toSeconds = function(month,isLeapYear) {
	if(isLeapYear == null) {
		isLeapYear = false;
	}
	return 86400 * (month == 1 ? 0 : isLeapYear ? month == 2 ? 31 : month == 3 ? 60 : month == 4 ? 91 : month == 5 ? 121 : month == 6 ? 152 : month == 7 ? 182 : month == 8 ? 213 : month == 9 ? 244 : month == 10 ? 274 : month == 11 ? 305 : 335 : month == 2 ? 31 : month == 3 ? 59 : month == 4 ? 90 : month == 5 ? 120 : month == 6 ? 151 : month == 7 ? 181 : month == 8 ? 212 : month == 9 ? 243 : month == 10 ? 273 : month == 11 ? 304 : 334);
};
datetime_utils_DateTimeMonthUtils.prototype = {
	__class__: datetime_utils_DateTimeMonthUtils
};
var datetime_utils_DateTimeSnapUtils = function() {
};
datetime_utils_DateTimeSnapUtils.__name__ = true;
datetime_utils_DateTimeSnapUtils.snapYear = function(dt,direction) {
	switch(direction) {
	case -1:
		return datetime_DateTime.yearStart(dt);
	case 0:
		var next = datetime_DateTime.yearStart(datetime_utils_DateTimeUtils.addYear(dt,1) + 62135596800.0);
		var previous = datetime_DateTime.yearStart(dt);
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		var next = datetime_utils_DateTimeUtils.addYear(dt,1) + 62135596800.0;
		return datetime_DateTime.yearStart(next);
	}
};
datetime_utils_DateTimeSnapUtils.snapMonth = function(dt,direction) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt));
	var isLeap = datetime_DateTime.isLeapYear(dt);
	switch(direction) {
	case -1:
		return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap);
	case 0:
		var previous = datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap);
		var next = datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + datetime_utils_DateTimeMonthUtils.days(month,isLeap) * 86400;
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + datetime_utils_DateTimeMonthUtils.days(month,isLeap) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.snapDay = function(dt,direction) {
	var days = (dt - 62135596800.0) / 86400;
	switch(direction) {
	case -1:
		return Math.floor(days) * 86400;
	case 0:
		return Math.round(days) * 86400;
	case 1:
		return Math.ceil(days) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.snapHour = function(dt,direction) {
	var hours = (dt - 62135596800.0) / 3600;
	switch(direction) {
	case -1:
		return Math.floor(hours) * 3600;
	case 0:
		return Math.round(hours) * 3600;
	case 1:
		return Math.ceil(hours) * 3600;
	}
};
datetime_utils_DateTimeSnapUtils.snapMinute = function(dt,direction) {
	var minutes = (dt - 62135596800.0) / 60;
	switch(direction) {
	case -1:
		return Math.floor(minutes) * 60;
	case 0:
		return Math.round(minutes) * 60;
	case 1:
		return Math.ceil(minutes) * 60;
	}
};
datetime_utils_DateTimeSnapUtils.snapWeek = function(dt,direction,required) {
	var current = datetime_DateTime.getWeekDay(dt);
	var days = Math.floor((dt - 62135596800.0) / 86400);
	switch(direction) {
	case -1:
		var diff = current >= required ? current - required : current + 7 - required;
		return (days - diff) * 86400;
	case 0:
		var diff = current >= required ? current - required : current + 7 - required;
		var previous = (days - diff) * 86400;
		var diff = required > current ? required - current : required + 7 - current;
		var next = (days + diff) * 86400;
		if(next - (dt - 62135596800.0) > dt - 62135596800.0 - previous) {
			return previous;
		} else {
			return next;
		}
		break;
	case 1:
		var diff = required > current ? required - current : required + 7 - current;
		return (days + diff) * 86400;
	}
};
datetime_utils_DateTimeSnapUtils.prototype = {
	__class__: datetime_utils_DateTimeSnapUtils
};
var datetime_utils_DateTimeUtils = function() {
};
datetime_utils_DateTimeUtils.__name__ = true;
datetime_utils_DateTimeUtils.fromString = function(str) {
	if(str.length == 10 || str.charCodeAt(10) == 32) {
		return datetime_utils_DateTimeUtils.parse(str);
	} else if(str.charCodeAt(10) == 84) {
		return datetime_utils_DateTimeUtils.fromIsoString(str);
	} else {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ss[.SSS]Z`");
	}
};
datetime_utils_DateTimeUtils.parse = function(str) {
	var ylength = str.indexOf("-");
	if(ylength < 1 || str.length - ylength != 6 && str.length - ylength != 15) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	if(str.length - ylength == 6) {
		str += " 00:00:00";
	}
	var year = Std.parseInt(HxOverrides.substr(str,0,ylength));
	var month = Std.parseInt(HxOverrides.substr(str,ylength + 1,2));
	var day = Std.parseInt(HxOverrides.substr(str,ylength + 4,2));
	var hour = Std.parseInt(HxOverrides.substr(str,ylength + 7,2));
	var minute = Std.parseInt(HxOverrides.substr(str,ylength + 10,2));
	var second = Std.parseInt(HxOverrides.substr(str,ylength + 13,2));
	if(year == null || month == null || day == null || hour == null || minute == null || second == null) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
	}
	var year1 = year;
	var month1 = month;
	var day1 = day;
	var hour1 = hour;
	var minute1 = minute;
	var second1 = second;
	if(second1 == null) {
		second1 = 0;
	}
	if(minute1 == null) {
		minute1 = 0;
	}
	if(hour1 == null) {
		hour1 = 0;
	}
	if(day1 == null) {
		day1 = 1;
	}
	if(month1 == null) {
		month1 = 1;
	}
	if(year1 == null) {
		year1 = 1970;
	}
	return datetime_utils_DateTimeUtils.yearToStamp(year1) + datetime_utils_DateTimeMonthUtils.toSeconds(month1,year1 % 4 == 0 && (year1 % 100 == 0 ? year1 % 400 == 0 : true)) + (day1 - 1) * 86400 + hour1 * 3600 + minute1 * 60 + second1 - 62135596800.0 + 62135596800.0;
};
datetime_utils_DateTimeUtils.fromIsoString = function(str) {
	var dotPos = str.indexOf(".");
	var zPos = str.indexOf("Z");
	if(str.charCodeAt(str.length - 1) != 90) {
		throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 UTC/Zulu string: Z not found.");
	}
	if(str.length > 20) {
		if(str.charCodeAt(19) != 46) {
			throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Millisecond specification erroneous.");
		}
		if(str.charCodeAt(23) != 90) {
			throw haxe_Exception.thrown("`" + str + "` - incorrect date/time format. Not an ISO 8601 string: Timezone specification erroneous.");
		}
	}
	return datetime_utils_DateTimeUtils.parse(HxOverrides.substr(str,0,10) + " " + HxOverrides.substr(str,11,8));
};
datetime_utils_DateTimeUtils.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
datetime_utils_DateTimeUtils.yearToStamp = function(year) {
	--year;
	var cquads = year / 400 | 0;
	var quads = (year - cquads * 400) / 4 | 0;
	var excessDays = quads / 25 | 0;
	return cquads * 12622780800.0 + quads * 126230400.0 - excessDays * 86400 + (year - cquads * 400 - quads * 4) * 31536000;
};
datetime_utils_DateTimeUtils.addYear = function(dt,amount) {
	var year = datetime_DateTime.getYear(dt) + amount;
	var time = datetime_DateTime.yearStart(dt);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var time1 = dt - 62135596800.0 - (time + datetime_utils_DateTimeMonthUtils.toSeconds(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)),datetime_DateTime.isLeapYear(dt)));
	var tmp = datetime_utils_DateTimeUtils.yearToStamp(year);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	return tmp + datetime_utils_DateTimeMonthUtils.toSeconds(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)),year % 4 == 0 && (year % 100 == 0 ? year % 400 == 0 : true)) + time1 - 62135596800.0;
};
datetime_utils_DateTimeUtils.addMonth = function(dt,amount) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) + amount;
	if(month > 12) {
		var years = month / 12 | 0;
		dt = datetime_utils_DateTimeUtils.addYear(dt,years) + 62135596800.0;
		month -= years * 12;
	} else if(month <= 0) {
		var years = (month / 12 | 0) - 1;
		dt = datetime_utils_DateTimeUtils.addYear(dt,years) + 62135596800.0;
		month -= years * 12;
	}
	var isLeap = datetime_DateTime.isLeapYear(dt);
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var value = datetime_utils_DateTimeMonthUtils.getMonthDay(days,datetime_DateTime.isLeapYear(dt));
	var max = datetime_utils_DateTimeMonthUtils.days(month,isLeap);
	var day = value < 1 ? 1 : value > max ? max : value;
	return datetime_DateTime.yearStart(dt) + datetime_utils_DateTimeMonthUtils.toSeconds(month,isLeap) + (day - 1) * 86400 + ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) * 3600 + ((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) * 60 + (dt - Math.floor(dt / 60) * 60 | 0);
};
datetime_utils_DateTimeUtils.getWeekDayNum = function(dt,weekDay,num) {
	var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
	var month = datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt));
	if(num > 0) {
		var start = datetime_DateTime.monthStart(dt,month) - 1 + 62135596800.0;
		var first = datetime_DateTime.snap(start,datetime_DTSnap.Week(1,weekDay));
		return datetime_DateTime.add(first,datetime_DTPeriod.Week(num - 1)) - 62135596800.0;
	} else if(num < 0) {
		var start = datetime_DateTime.monthStart(dt,month + 1) - 1 + 62135596800.0;
		var first = datetime_DateTime.snap(start,datetime_DTSnap.Week(-1,weekDay));
		return datetime_DateTime.add(first,datetime_DTPeriod.Week(num + 1)) - 62135596800.0;
	} else {
		return dt - 62135596800.0;
	}
};
datetime_utils_DateTimeUtils.strftime = function(dt,format) {
	var prevPos = 0;
	var pos = format.indexOf("%");
	var str = "";
	while(pos >= 0) {
		str += format.substring(prevPos,pos);
		++pos;
		switch(format.charCodeAt(pos)) {
		case 37:
			str += "%";
			break;
		case 67:
			str += StringTools.lpad((datetime_DateTime.getYear(dt) / 100 | 0) + "","0",2);
			break;
		case 68:
			var days = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			var str1 = StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days,datetime_DateTime.isLeapYear(dt)) + "/","0",3);
			var days1 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += str1 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days1,datetime_DateTime.isLeapYear(dt)) + "/","0",3) + StringTools.lpad(HxOverrides.substr(datetime_DateTime.getYear(dt) + "",-2,null),"0",2);
			break;
		case 70:
			var str2 = datetime_DateTime.getYear(dt) + "-";
			var days2 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			var str3 = str2 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days2,datetime_DateTime.isLeapYear(dt)) + "-","0",3);
			var days3 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += str3 + StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days3,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 72:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + "","0",2);
			break;
		case 73:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + "","0",2);
			break;
		case 77:
			str += StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + "","0",2);
			break;
		case 80:
			str += ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) < 12 ? "am" : "pm";
			break;
		case 82:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + "","0",2);
			break;
		case 83:
			str += StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 84:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + ":","0",3) + StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 86:
			str += StringTools.lpad(datetime_DateTime.getWeek(dt) + "","0",2);
			break;
		case 89:
			str += datetime_DateTime.getYear(dt) + "";
			break;
		case 100:
			var days4 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days4,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 101:
			var days5 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonthDay(days5,datetime_DateTime.isLeapYear(dt)) + ""," ",2);
			break;
		case 106:
			var day = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad("" + day,"0",3);
			break;
		case 107:
			str += StringTools.lpad(((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) + ""," ",2);
			break;
		case 108:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + ""," ",2);
			break;
		case 109:
			var days6 = ((dt - 62135596800.0 - datetime_DateTime.yearStart(dt)) / 86400 | 0) + 1;
			str += StringTools.lpad(datetime_utils_DateTimeMonthUtils.getMonth(days6,datetime_DateTime.isLeapYear(dt)) + "","0",2);
			break;
		case 112:
			str += ((dt - Math.floor(dt / 86400) * 86400) / 3600 | 0) < 12 ? "AM" : "PM";
			break;
		case 114:
			str += StringTools.lpad(datetime_DateTime.getHour12(dt) + ":","0",3) + StringTools.lpad(((dt - Math.floor(dt / 3600) * 3600) / 60 | 0) + ":","0",3) + StringTools.lpad((dt - Math.floor(dt / 60) * 60 | 0) + "","0",2);
			break;
		case 115:
			str += dt - 62135596800.0 + "";
			break;
		case 117:
			str += datetime_DateTime.getWeekDay(dt,true) + "";
			break;
		case 119:
			str += datetime_DateTime.getWeekDay(dt) + "";
			break;
		case 121:
			str += StringTools.lpad(HxOverrides.substr(datetime_DateTime.getYear(dt) + "",-2,null),"0",2);
			break;
		}
		prevPos = pos + 1;
		pos = format.indexOf("%",pos + 1);
	}
	str += format.substring(prevPos);
	return str;
};
datetime_utils_DateTimeUtils.prototype = {
	__class__: datetime_utils_DateTimeUtils
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_message:"get_message"}
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Sha1 = function() {
};
haxe_crypto_Sha1.__name__ = true;
haxe_crypto_Sha1.encode = function(s) {
	var sh = new haxe_crypto_Sha1();
	var h = sh.doEncode(haxe_crypto_Sha1.str2blks(s));
	return sh.hex(h);
};
haxe_crypto_Sha1.str2blks = function(s) {
	var s1 = haxe_io_Bytes.ofString(s);
	var nblk = (s1.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g = 0;
	var _g1 = s1.length;
	while(_g < _g1) {
		var i = _g++;
		var p = i >> 2;
		blks[p] |= s1.b[i] << 24 - ((i & 3) << 3);
	}
	var i = s1.length;
	var p = i >> 2;
	blks[p] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = s1.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += StringTools.hex(num,8);
		}
		return str.toLowerCase();
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var helper_kits_DateKit = function() { };
helper_kits_DateKit.__name__ = true;
helper_kits_DateKit.getUTCNow = function() {
	return helper_kits_DateKit.convertToUTCDate(new Date());
};
helper_kits_DateKit.convertToUTCDate = function(localDate) {
	return new Date(localDate.getTime() + localDate.getTimezoneOffset() * 60000);
};
helper_kits_DateKit.convertToLocalDate = function(utcDate) {
	return new Date(Date.UTC(utcDate.getFullYear(),utcDate.getMonth(),utcDate.getDate(),utcDate.getHours(),utcDate.getMinutes(),utcDate.getSeconds()));
};
helper_kits_DateKit.getTimeFrame = function(date) {
	var minutes = helper_kits_DateKit.getDiffMinutes(date,new Date());
	if(minutes < 3) {
		return "Há poucos minutos";
	} else if(minutes < 12) {
		return "Há " + Math.round(minutes) + " minutos";
	} else if(minutes < 60) {
		return "Há " + Math.round(minutes / 5) * 5 + " minutos";
	} else if(minutes < 120) {
		return "Há 1 hora";
	} else if(minutes < 300) {
		return "Há " + Math.round(minutes / 60) + " horas";
	} else if(minutes < 360 || DateTools.format(date,"%d/%m/%Y") == DateTools.format(new Date(),"%d/%m/%Y")) {
		return helper_kits_DateKit.getTimeString(date);
	} else {
		return helper_kits_DateKit.getDateString(date);
	}
};
helper_kits_DateKit.getTimeFrameEnglish = function(date) {
	var minutes = helper_kits_DateKit.getDiffMinutes(date,new Date());
	if(minutes < 3) {
		return "Few minutes ago";
	} else if(minutes < 12) {
		return "" + Math.round(minutes) + " minutes ago";
	} else if(minutes < 60) {
		return "" + Math.round(minutes / 5) * 5 + " minutes ago";
	} else if(minutes < 120) {
		return "1 hour ago";
	} else if(minutes < 300) {
		return "" + Math.round(minutes / 60) + " hours ago";
	} else if(minutes < 360 || helper_kits_DateKit.getDateStringEnglish(date) == helper_kits_DateKit.getDateStringEnglish(new Date())) {
		return helper_kits_DateKit.getTimeString(date);
	} else {
		return DateTools.format(date,"%b %d, %Y");
	}
};
helper_kits_DateKit.calculateYearOld = function(birth) {
	if(birth == null || typeof(birth) == "string") {
		return 0;
	}
	var cur = new Date();
	var age = cur.getFullYear() - birth.getFullYear();
	if(age > 0) {
		if(birth.getMonth() > cur.getMonth()) {
			--age;
		} else if(birth.getDate() > cur.getDay()) {
			--age;
		}
	}
	return age;
};
helper_kits_DateKit.getDiffYears = function(date1,date2) {
	var value1 = date1.getTime();
	var value2 = date2.getTime();
	return (value2 - value1) / (86400000 * 365);
};
helper_kits_DateKit.getDiffHour = function(date1,date2) {
	var value1 = date1.getTime();
	var value2 = date2.getTime();
	return (value2 - value1) / 3600000;
};
helper_kits_DateKit.getDiffMinutes = function(dateStart,dateEnd) {
	var valStart = dateStart.getTime();
	var valEnd = dateEnd.getTime();
	return (valEnd - valStart) / 60000;
};
helper_kits_DateKit.getDiffDay = function(date1,date2) {
	var value1 = date1.getTime();
	var value2 = date2.getTime();
	return (value2 - value1) / 86400000;
};
helper_kits_DateKit.applyDateMask = function(value) {
	if(value.split("/").length == 3) {
		return value;
	}
	var onlyNumbers = helper_kits_StringKit.getAllowedChars(value,"0123456789");
	var result = "";
	var _g = 0;
	var _g1 = onlyNumbers.length;
	while(_g < _g1) {
		var i = _g++;
		if(result.length == 2) {
			result += "/";
		}
		if(result.length == 5) {
			result += "/";
		}
		result += onlyNumbers.charAt(i);
	}
	if(value.length == 3 && result.length == 2) {
		result += "/";
	}
	if(value.length == 6 && result.length == 5) {
		result += "/";
	}
	return result;
};
helper_kits_DateKit.getDateMidnight = function(date) {
	return HxOverrides.strDate(helper_kits_DateKit.getDateMysqlFormat(date) + " 23:59:59");
};
helper_kits_DateKit.getDateFreshDay = function(date) {
	return HxOverrides.strDate(helper_kits_DateKit.getDateMysqlFormat(date) + " 00:00:00");
};
helper_kits_DateKit.convertToDate = function(value,subjectiveDate) {
	if(subjectiveDate == null) {
		subjectiveDate = true;
	}
	value = StringTools.trim(value).toLowerCase();
	if(subjectiveDate) {
		if(value == "hoje" || value == "today") {
			return new Date();
		}
		if(value == "amanha" || value == "amanhã" || value == "tomorrow") {
			return helper_kits_DateKit.addDays(new Date(),1);
		}
		if(value == "ontem" || value == "yesterday") {
			return helper_kits_DateKit.addDays(new Date(),-1);
		}
	}
	value = value.split("-").join(".");
	value = value.split("/").join(".");
	value = value.split("\\").join(".");
	value = value.split(":").join(".");
	value = value.split(" ").join(".");
	value = value.split("..").join(".");
	value = value.split("..").join(".");
	value = value.split("..").join(".");
	value = value.split("..").join(".");
	var vals = value.split(".");
	if(vals.length != 3 && vals.length != 5) {
		return null;
	}
	if(vals[2].length < 4) {
		var yearNumber = Std.parseInt(vals[2]);
		if(yearNumber == null) {
			return null;
		}
		var currYear = new Date().getFullYear() + 10 - 2000;
		if(yearNumber > currYear) {
			yearNumber += 1900;
		} else {
			yearNumber += 2000;
		}
		vals[2] = yearNumber == null ? "null" : "" + yearNumber;
	}
	vals[1] = StringTools.lpad(Std.string(Std.parseInt(vals[1])),"0",2);
	vals[0] = StringTools.lpad(Std.string(Std.parseInt(vals[0])),"0",2);
	if(vals.length == 5) {
		vals[4] = StringTools.lpad(Std.string(Std.parseInt(vals[4])),"0",2);
		vals[3] = StringTools.lpad(Std.string(Std.parseInt(vals[3])),"0",2);
	}
	try {
		var date = HxOverrides.strDate(vals[2] + "-" + vals[1] + "-" + vals[0]);
		if(vals.length == 5) {
			date = HxOverrides.strDate(vals[2] + "-" + vals[1] + "-" + vals[0] + " " + vals[3] + ":" + vals[4] + ":00");
		}
		if(DateTools.format(date,"%d.%m.%Y") == "" + vals[0] + "." + vals[1] + "." + vals[2]) {
			return date;
		}
		return null;
	} catch( _g ) {
		return null;
	}
};
helper_kits_DateKit.addDays = function(date,days) {
	return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);
};
helper_kits_DateKit.addMinutes = function(date,minutes) {
	return new Date(date.getTime() + minutes * 60 * 1000);
};
helper_kits_DateKit.addMonth = function(date,months) {
	var curYear = date.getFullYear();
	var curMonth = date.getMonth() + 1;
	var curDay = date.getDate();
	curMonth += months;
	if(curMonth > 12) {
		curYear += Math.floor(curMonth / 12);
		curMonth %= 12;
	} else if(curMonth < 0) {
		curYear += Math.floor((curMonth - 12) / 12);
		curMonth = 12 + (curMonth - 12) % 12;
	}
	var maxDays = DateTools.getMonthDays(new Date(curYear,curMonth - 1,1,0,0,0));
	if(curDay > maxDays) {
		curDay = maxDays;
	}
	return new Date(curYear,curMonth - 1,curDay,date.getHours(),date.getMinutes(),date.getSeconds());
};
helper_kits_DateKit.getDates = function(month,year) {
	var monthString = month < 9 ? "0" + (month + 1) : "" + (month + 1);
	var yearString = year == null ? "null" : "" + year;
	var referenceDate = HxOverrides.strDate("" + yearString + "-" + monthString + "-01");
	var maxDays = DateTools.getMonthDays(referenceDate);
	var result = [];
	var _g = 0;
	var _g1 = maxDays;
	while(_g < _g1) {
		var i = _g++;
		var dayString = i < 9 ? "0" + (i + 1) : "" + (i + 1);
		result.push(HxOverrides.strDate("" + yearString + "-" + monthString + "-" + dayString));
	}
	return result;
};
helper_kits_DateKit.compare = function(date,toDate) {
	if(date == null || toDate == null) {
		return null;
	}
	var cleanDate = helper_kits_DateKit.getOnlyDate(date);
	var cleanToDate = helper_kits_DateKit.getOnlyDate(toDate);
	if(cleanDate.getTime() < cleanToDate.getTime()) {
		return -1;
	}
	if(cleanDate.getTime() > cleanToDate.getTime()) {
		return 1;
	}
	return 0;
};
helper_kits_DateKit.getDatesBetweenDates = function(dateA,dateB) {
	var result = [];
	var ta = helper_kits_DateKit.getOnlyDate(dateA).getTime();
	var tb = helper_kits_DateKit.getOnlyDate(dateB).getTime();
	var currentTime = ta;
	var dayMS = 86400000;
	while(currentTime <= tb) {
		result.push(helper_kits_DateKit.getOnlyDate(new Date(currentTime)));
		currentTime += dayMS;
	}
	return result;
};
helper_kits_DateKit.getDaysBetweenDates = function(dateA,dateB) {
	var ta = dateA.getTime();
	var tb = dateB.getTime();
	var delta = tb - ta;
	var dayMS = 86400000;
	return Math.floor(delta / dayMS);
};
helper_kits_DateKit.getFirstDay = function(month,year) {
	return new Date(year,month,1,0,0,0);
};
helper_kits_DateKit.getLastDay = function(month,year) {
	var first = helper_kits_DateKit.getFirstDay(month,year);
	var lastDay = DateTools.getMonthDays(first);
	return new Date(year,month,lastDay,0,0,0);
};
helper_kits_DateKit.getOnlyDate = function(date) {
	if(date == null) {
		return null;
	}
	return new Date(date.getFullYear(),date.getMonth(),date.getDate(),0,0,0);
};
helper_kits_DateKit.getOnlyTime = function(date) {
	if(date == null) {
		return null;
	}
	return new helper_types_TimeValue(date.getHours(),date.getMinutes(),date.getSeconds());
};
helper_kits_DateKit.getCurrentDate = function() {
	return helper_kits_DateKit.getOnlyDate(new Date());
};
helper_kits_DateKit.getDateMysqlFormat = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%Y-%m-%d");
};
helper_kits_DateKit.getDateTimeMysqlFormat = function(date,includeSeconds) {
	if(includeSeconds == null) {
		includeSeconds = false;
	}
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%Y-%m-%d %H:%M" + (includeSeconds ? ":%S" : ""));
};
helper_kits_DateKit.getSmallDateString = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%d/%m");
};
helper_kits_DateKit.getDateString = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%d/%m/%Y");
};
helper_kits_DateKit.getDateStringEnglish = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%m/%d/%Y");
};
helper_kits_DateKit.getDateTimeString = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%d/%m/%Y %H:%Mh");
};
helper_kits_DateKit.getTimeString = function(date) {
	if(date == null) {
		return "-";
	}
	return DateTools.format(date,"%H:%M") + "h";
};
helper_kits_DateKit.getMonthYearString = function(date) {
	return helper_kits_DateKit.getMonthName(date.getMonth()) + " " + date.getFullYear();
};
helper_kits_DateKit.getMonthName = function(monthValue) {
	return ["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"][monthValue];
};
helper_kits_DateKit.getExtendedDateString = function(date) {
	return date.getDate() + " de " + helper_kits_DateKit.getMonthName(date.getMonth()) + " de " + date.getFullYear();
};
helper_kits_DateKit.getMysqlDateField = function(fieldName) {
	return "DATE_FORMAT(" + fieldName + ", '%Y-%m-%d %H:%i:%s') as " + fieldName;
};
helper_kits_DateKit.isValidDateValue = function(value) {
	if(value == null) {
		return false;
	}
	if(((value) instanceof Date)) {
		return true;
	} else if(typeof(value) == "string") {
		try {
			var d = datetime_utils_DateTimeUtils.fromString(value);
			if(datetime_DateTime.getYear(d) >= 1970) {
				return true;
			}
		} catch( _g ) {
		}
	} else if(typeof(value) == "number") {
		try {
			var this1 = value + 62135596800.0;
			return true;
		} catch( _g ) {
		}
	}
	return false;
};
var helper_kits_StringKit = function() { };
helper_kits_StringKit.__name__ = true;
helper_kits_StringKit.removeQuotes = function(value) {
	if(value.length > 1 && value.charAt(0) == "\"" && value.charAt(value.length - 1) == "\"") {
		return value.substring(1,value.length - 1);
	} else {
		return value;
	}
};
helper_kits_StringKit.getWordSurroundingCharAt = function(value,position) {
	var words = value.split(" ");
	var lastWord = "";
	if(words.length == 1) {
		return value;
	} else {
		var count = 0;
		var _g = 0;
		while(_g < words.length) {
			var word = words[_g];
			++_g;
			if(!helper_kits_StringKit.isEmpty(word)) {
				lastWord = word;
			}
			count += word.length;
			if(count >= position) {
				return lastWord;
			}
			++count;
		}
		return lastWord;
	}
};
helper_kits_StringKit.simpleScape = function(value) {
	if(value == null) {
		return "";
	}
	var finalValue = value == null ? "null" : "" + value;
	finalValue = helper_kits_StringKit.htmlEscape(finalValue);
	finalValue = StringTools.replace(finalValue,"\n","<br>");
	finalValue = StringTools.replace(finalValue,"{[[","<b>");
	finalValue = StringTools.replace(finalValue,"]]}","</b>");
	return finalValue;
};
helper_kits_StringKit.getValueOrEmptyString = function(value) {
	if(value != null) {
		return value;
	} else {
		return "";
	}
};
helper_kits_StringKit.getFirstFilledValue = function(values,defaultValue) {
	var _g = 0;
	while(_g < values.length) {
		var item = values[_g];
		++_g;
		if(!helper_kits_StringKit.isEmpty(item)) {
			return item;
		}
	}
	return defaultValue;
};
helper_kits_StringKit.preventBreakLine = function(value,html) {
	if(html == null) {
		html = true;
	}
	if(value == null) {
		return value;
	}
	var finalValue = value;
	finalValue = StringTools.replace(finalValue,"\n"," ");
	finalValue = StringTools.replace(finalValue,"\r"," ");
	if(html) {
		finalValue = StringTools.replace(finalValue,"<br>"," ");
	}
	return finalValue;
};
helper_kits_StringKit.getBetweenTags = function(content,startTag,endTag) {
	var contentLower = content.toLowerCase();
	var startIndex = contentLower.indexOf(startTag.toLowerCase()) + startTag.length;
	var endIndex = contentLower.indexOf(endTag.toLowerCase());
	if(startIndex == startTag.length - 1 && endIndex > -1) {
		return content.substring(0,endIndex);
	} else if(startIndex >= startTag.length && endIndex < 0) {
		return content.substring(startIndex);
	} else if(startIndex == startTag.length - 1 && endIndex < 0) {
		return content;
	} else if(startIndex <= endIndex) {
		return content.substring(startIndex,endIndex);
	} else {
		return content.substring(endIndex,startIndex);
	}
};
helper_kits_StringKit.replaceBetweenTags = function(content,startTag,endTag,replaceWith) {
	var contentLower = content.toLowerCase();
	var startIndex = contentLower.indexOf(startTag.toLowerCase());
	var endIndex = contentLower.indexOf(endTag.toLowerCase()) + endTag.length;
	if(startIndex == startTag.length - 1 && endIndex > -1) {
		startIndex = 0;
	} else if(startIndex >= startTag.length && endIndex < 0) {
		endIndex = content.length - 1;
	} else if(startIndex == startTag.length - 1 && endIndex < 0) {
		return content;
	} else if(startIndex > endIndex) {
		var temp_end = endIndex;
		startIndex = endIndex;
		endIndex = temp_end;
	}
	var result = content.substring(0,startIndex) + replaceWith + content.substring(endIndex,content.length - 1);
	return result;
};
helper_kits_StringKit.splitSQL = function(multiQuery) {
	var result = [];
	var insideDoubleQuote = false;
	var insideSingleQuote = false;
	var query = "";
	var _g = 0;
	var _g1 = multiQuery.length;
	while(_g < _g1) {
		var i = _g++;
		var currLetter = multiQuery.charAt(i);
		var lastLetter = multiQuery.charAt(i - 1);
		if(!insideDoubleQuote && !insideSingleQuote && currLetter == "\"") {
			insideDoubleQuote = true;
		} else if(!insideDoubleQuote && !insideSingleQuote && currLetter == "'") {
			insideSingleQuote = true;
		} else if(insideDoubleQuote && currLetter == "\"" && lastLetter != "\\") {
			insideDoubleQuote = false;
		} else if(insideSingleQuote && currLetter == "'" && lastLetter != "\\") {
			insideSingleQuote = false;
		}
		if(!insideDoubleQuote && !insideDoubleQuote && currLetter == ";") {
			if(StringTools.trim(query) != "") {
				result.push(query);
			}
			query = "";
		} else {
			query += currLetter;
		}
	}
	if(StringTools.trim(query) != "") {
		result.push(query);
	}
	return result;
};
helper_kits_StringKit.makeSnake = function(value) {
	var data = value.toLowerCase();
	data = helper_kits_StringKit.stripSpecialChars(data,"abcdefghijklmnopqrstuvxywz _-");
	data = data.split(" ").join("_");
	data = data.split("-").join("_");
	return data;
};
helper_kits_StringKit.generateRandomHex = function(bytesLen) {
	return helper_kits_StringKit.generateRandomString(bytesLen * 2,"0123456789abcdef".split(""));
};
helper_kits_StringKit.generateRandomString = function(len,allowedChars) {
	if(allowedChars == null) {
		allowedChars = "abcdefghijklmnopqrstuvxywz0123456789".split("");
	}
	var result = "";
	if(allowedChars.length == 0) {
		return result;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		result += allowedChars[Math.floor(Math.random() * allowedChars.length)];
	}
	return result;
};
helper_kits_StringKit.matchValue = function(searchFor,searchIn) {
	searchFor = StringTools.trim(searchFor);
	if(searchFor.length == 0) {
		return true;
	}
	searchFor = helper_kits_StringKit.stripSpecialChars(searchFor.toLowerCase());
	searchIn = helper_kits_StringKit.stripSpecialChars(StringTools.trim(searchIn).toLowerCase());
	var pieces = searchFor.split(" ");
	var _g = 0;
	while(_g < pieces.length) {
		var piece = pieces[_g];
		++_g;
		if(searchIn.indexOf(piece) == -1) {
			return false;
		}
	}
	return true;
};
helper_kits_StringKit.existsIn = function(searchIn,value) {
	var value1 = StringTools.trim(value);
	if(value1.length == 0) {
		return true;
	}
	value1 = helper_kits_StringKit.stripSpecialChars(value1.toLowerCase());
	var searchIn1 = helper_kits_StringKit.stripSpecialChars(StringTools.trim(searchIn).toLowerCase());
	if(searchIn1.indexOf(value1) == -1) {
		return false;
	}
	return true;
};
helper_kits_StringKit.filterList = function(filter,values,breakFilter) {
	if(breakFilter == null) {
		breakFilter = false;
	}
	var valueFilter = helper_kits_StringKit.stripSpecialChars(StringTools.trim(filter).toLowerCase());
	if(valueFilter.length == 0) {
		return values;
	}
	var filterListBlock = breakFilter ? valueFilter.split(" ") : [valueFilter];
	var filterListValues = [];
	var _g = 0;
	while(_g < filterListBlock.length) {
		var filterValue = filterListBlock[_g];
		++_g;
		if(StringTools.trim(filterValue).length > 2) {
			filterListValues.push(filterValue);
		}
	}
	if(filterListValues.length == 0) {
		return values;
	}
	var result = [];
	var _g = 0;
	while(_g < values.length) {
		var item = values[_g];
		++_g;
		var toSearch = helper_kits_StringKit.stripSpecialChars(item.toLowerCase());
		var add = true;
		var _g1 = 0;
		while(_g1 < filterListValues.length) {
			var filter = filterListValues[_g1];
			++_g1;
			if(toSearch.indexOf(filter) == -1) {
				add = false;
				break;
			}
		}
		if(add) {
			result.push(item);
		}
	}
	return result;
};
helper_kits_StringKit.stripSpecialChars = function(value,allowed) {
	if(allowed == null) {
		allowed = "";
	}
	var result = value;
	if(allowed == "") {
		allowed = "abcdefghijklmnopqrstuvxwyz 1234567890-_";
	}
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_A,"a");
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_E,"e");
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_I,"i");
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_O,"o");
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_U,"u");
	result = helper_kits_StringKit.replace(result,helper_kits_StringKit.STRIP_C,"c");
	result = helper_kits_StringKit.getAllowedChars(result,allowed);
	return result;
};
helper_kits_StringKit.getLabelForData = function(data,field) {
	var result = "";
	if(field != null && field != "") {
		var val = Reflect.getProperty(data,field);
		if(val == null) {
			result = Std.string(data);
		} else {
			result = Std.string(val);
		}
	} else {
		result = Std.string(data);
	}
	return result;
};
helper_kits_StringKit.formatToDate = function(value) {
	if(value == null) {
		return null;
	}
	var date = helper_kits_DateKit.convertToDate(helper_kits_DateKit.applyDateMask(value),false);
	if(date == null) {
		return null;
	} else {
		return DateTools.format(date,"%d/%m/%Y");
	}
};
helper_kits_StringKit.formatToToken = function(value) {
	var cleanValue = helper_kits_StringKit.stripSpecialChars(value.toUpperCase(),"ABCDEFGHIJKLMNOPQRSTUVXWYZ0123456789");
	var finalValue = "";
	var _g = 0;
	var _g1 = cleanValue.length;
	while(_g < _g1) {
		var i = _g++;
		if(i > 0 && i % 4 == 0 && i < 16) {
			finalValue += "-" + cleanValue.charAt(i);
		} else {
			finalValue += cleanValue.charAt(i);
		}
	}
	return finalValue;
};
helper_kits_StringKit.formatToCPF = function(value) {
	if(value == null) {
		return "";
	}
	var result = helper_kits_StringKit.getAllowedChars(value,"0123456789");
	if(result.length == 11) {
		result = HxOverrides.substr(result,0,3) + "." + HxOverrides.substr(result,3,3) + "." + HxOverrides.substr(result,6,3) + "-" + HxOverrides.substr(result,9,2);
	}
	return result;
};
helper_kits_StringKit.replace = function(value,itensToReplace,replaceWith) {
	var result = value;
	var _g = 0;
	while(_g < itensToReplace.length) {
		var item = itensToReplace[_g];
		++_g;
		result = result.split(item).join(replaceWith);
	}
	return result;
};
helper_kits_StringKit.replaceMap = function(value,replace) {
	var result = value;
	var h = replace.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		result = result.split(key).join(replace.h[key]);
	}
	return result;
};
helper_kits_StringKit.hasAllowedChars = function(value,allowedChars) {
	var _g = 0;
	var _g1 = value.length;
	while(_g < _g1) {
		var i = _g++;
		if(allowedChars.indexOf(value.charAt(i)) == -1) {
			return false;
		}
	}
	return true;
};
helper_kits_StringKit.getAllowedChars = function(value,allowed) {
	if(allowed == null) {
		allowed = "";
	}
	if(allowed == null || allowed == "") {
		return value;
	}
	var result = "";
	var _g = 0;
	var _g1 = value.length;
	while(_g < _g1) {
		var i = _g++;
		if(allowed.indexOf(value.charAt(i)) > -1) {
			result += value.charAt(i);
		}
	}
	return result;
};
helper_kits_StringKit.removeDuplicatedSpaces = function(value) {
	var result = value;
	while(result.indexOf("  ") > -1) result = result.split("  ").join(" ");
	result = StringTools.trim(result);
	return result;
};
helper_kits_StringKit.getFirstName = function(fullname) {
	var full = helper_kits_StringKit.removeDuplicatedSpaces(fullname);
	var breakName = full.split(" ");
	var firstName = "";
	if(breakName.length > 1) {
		breakName.pop();
	}
	firstName = breakName.join(" ");
	return firstName;
};
helper_kits_StringKit.removeBreaks = function(value) {
	var result = value;
	result = result.split("<br>").join(" ");
	result = result.split("<BR>").join(" ");
	result = result.split("\n").join(" ");
	return result;
};
helper_kits_StringKit.getLastName = function(fullname) {
	var full = helper_kits_StringKit.removeDuplicatedSpaces(fullname);
	var breakName = full.split(" ");
	var lastName = "";
	if(breakName.length > 1) {
		lastName = breakName.pop();
	}
	return lastName;
};
helper_kits_StringKit.getEmail = function(value) {
	var ereg = new EReg("[A-Z0-9]+[A-Z0-9._%-]*@[A-Z0-9]+[A-Z0-9.-]*\\.[A-Z][A-Z][A-Z]?","i");
	if(ereg.match(value)) {
		return ereg.matched(0).toLowerCase();
	} else {
		return null;
	}
};
helper_kits_StringKit.isEmail = function(email) {
	var emailExpression = new EReg("[A-Z0-9._%-]+@[A-Z0-9.-]+\\.[A-Z][A-Z][A-Z]?","i");
	return emailExpression.match(email);
};
helper_kits_StringKit.isURL = function(value) {
	if(helper_kits_StringKit.isEmpty(value)) {
		return false;
	}
	var e = new EReg("^" + "(?:(?:(?:https?|ftp):)?\\/\\/)" + "(?:\\S+(?::\\S*)?@)?" + "(?:" + "(?!(?:10|127)(?:\\.\\d{1,3}){3})" + "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" + "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" + "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" + "(?:" + "(?:" + "[a-z0-9\\u00a1-\\uffff]" + "[a-z0-9\\u00a1-\\uffff_-]{0,62}" + ")?" + "[a-z0-9\\u00a1-\\uffff]\\." + ")+" + "(?:[a-z\\u00a1-\\uffff]{2,}\\.?)" + ")" + "(?::\\d{2,5})?" + "(?:[/?#]\\S*)?" + "$","i");
	return e.match(value);
};
helper_kits_StringKit.trim = function(value) {
	if(value == null) {
		return "";
	} else {
		value = value.split(String.fromCodePoint(160)).join(" ");
		return StringTools.trim(value);
	}
};
helper_kits_StringKit.isNumericInt = function(value) {
	if(helper_kits_StringKit.isEmpty(value)) {
		return false;
	} else if(Std.parseInt(value) != null) {
		return true;
	} else {
		return false;
	}
};
helper_kits_StringKit.isEmpty = function(value) {
	if(value == null) {
		return true;
	} else if(helper_kits_StringKit.trim(value).length == 0) {
		return true;
	} else {
		return false;
	}
};
helper_kits_StringKit.htmlEscape = function(value) {
	if(value == null) {
		return "";
	}
	return StringTools.htmlEscape(value);
};
helper_kits_StringKit.isSemanticVersion = function(value) {
	if(helper_kits_StringKit.isEmpty(value)) {
		return false;
	} else {
		var b = value.split(".");
		if(b.length != 3) {
			return false;
		} else {
			var _g = 0;
			while(_g < b.length) {
				var part = b[_g];
				++_g;
				if(part != "0" && part.charAt(0) == "0" || !helper_kits_StringKit.isNumericInt(part)) {
					return false;
				}
			}
			return true;
		}
	}
};
helper_kits_StringKit.isValidJson = function(value) {
	if(helper_kits_StringKit.isEmpty(value)) {
		return false;
	}
	try {
		var json = JSON.parse(value);
		return true;
	} catch( _g ) {
		return false;
	}
};
var helper_maker_QueryMaker = function() { };
helper_maker_QueryMaker.__name__ = true;
helper_maker_QueryMaker.make = function(sql,data,$escape) {
	if(data == null) {
		return sql;
	}
	if($escape == null && helper_maker_QueryMaker.SANITIZE == null) {
		throw haxe_Exception.thrown("Set a SANITIZE Method for QueryMaker");
	} else if($escape == null && helper_maker_QueryMaker.SANITIZE != null) {
		$escape = helper_maker_QueryMaker.SANITIZE;
	}
	var keyData_h = Object.create(null);
	var _g = 0;
	var _g1 = Reflect.fields(data);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		keyData_h[key] = Reflect.field(data,key);
	}
	var result = "";
	var ereg = new EReg(":([a-zA-Z0-9_]+)","gm");
	while(ereg.match(sql)) {
		result += ereg.matchedLeft();
		var key = ereg.matched(1);
		if(Object.prototype.hasOwnProperty.call(keyData_h,key)) {
			result += helper_maker_QueryMaker.sanitizeValue(keyData_h[key],$escape);
		} else {
			result += ":" + key;
		}
		sql = ereg.matchedRight();
	}
	result += sql;
	return result;
};
helper_maker_QueryMaker.sanitizeValue = function(value,$escape) {
	var result = "";
	if(value == null) {
		result = "NULL";
	} else if(typeof(value) == "boolean") {
		result = value ? "1" : "0";
	} else if(typeof(value) == "number" && ((value | 0) === value)) {
		result = "" + Std.string(value);
	} else if(((value) instanceof Date)) {
		var date = value;
		var dateString = "" + ("\"" + date.getFullYear() + "-") + ("" + StringTools.lpad(Std.string(date.getMonth() + 1),"0",2) + "-") + ("" + StringTools.lpad(Std.string(date.getDate()),"0",2) + " ") + ("" + StringTools.lpad(Std.string(date.getHours()),"0",2) + ":") + ("" + StringTools.lpad(Std.string(date.getMinutes()),"0",2) + ":") + ("" + StringTools.lpad(Std.string(date.getSeconds()),"0",2) + "\"");
		result = "" + dateString;
	} else {
		var valueString = Std.string(value);
		if(valueString.length == 0) {
			result = "''";
		} else {
			result = $escape(valueString);
		}
	}
	return result;
};
var helper_types_TimeValue = function(hours,minutes,seconds) {
	var current = new Date();
	this.set_hours(hours == null ? current.getHours() : hours);
	this.set_minutes(minutes == null ? current.getMinutes() : minutes);
	this.set_seconds(seconds == null ? current.getSeconds() : seconds);
};
helper_types_TimeValue.__name__ = true;
helper_types_TimeValue.prototype = {
	set_hours: function(value) {
		if(value == this.hours) {
			return value;
		}
		if(value >= 24 || value < 0) {
			throw haxe_Exception.thrown("Invalid Hours Value : " + value);
		}
		return this.hours = value;
	}
	,set_minutes: function(value) {
		if(value == this.minutes) {
			return value;
		}
		if(value >= 60 || value < 0) {
			throw haxe_Exception.thrown("Invalid Minutes Value : " + value);
		}
		return this.minutes = value;
	}
	,set_seconds: function(value) {
		if(value == this.seconds) {
			return value;
		}
		if(value >= 60 || value < 0) {
			throw haxe_Exception.thrown("Invalid Seconds Value : " + value);
		}
		return this.seconds = value;
	}
	,toString: function() {
		return (this.hours < 10 ? "0" + this.hours : "" + this.hours) + ":" + (this.minutes < 10 ? "0" + this.minutes : "" + this.minutes);
	}
	,fromString: function(value) {
		var block = value.split(":");
		if(block.length > 0) {
			this.set_hours(Std.parseInt(block[0]));
		} else {
			this.set_hours(0);
		}
		if(block.length > 1) {
			this.set_minutes(Std.parseInt(block[1]));
		} else {
			this.set_minutes(0);
		}
		if(block.length > 2) {
			this.set_seconds(Std.parseInt(block[2]));
		} else {
			this.set_seconds(0);
		}
	}
	,__class__: helper_types_TimeValue
	,__properties__: {set_seconds:"set_seconds",set_minutes:"set_minutes",set_hours:"set_hours"}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry.__properties__ = {get_value:"get_value",get_name:"get_name"};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var migration_Migration = function(uuid) {
	this.data = [];
	this.migrationUUID = uuid;
};
migration_Migration.__name__ = true;
migration_Migration.print = function(message,color) {
	terminal_Terminal.print("ACEROLA MIGRATION >> ",null,false);
	terminal_Terminal.print(message,color);
};
migration_Migration.prototype = {
	connectDatabase: function(connection,onSuccess,onError,maxRetry) {
		if(maxRetry == null) {
			maxRetry = 5;
		}
		var _gthis = this;
		if(this.mysql == null) {
			this.mysql = require('mysql2').createConnection({ host : connection.host, user : connection.user, password : connection.password, port : connection.port, charset : "utf8mb4", multipleStatements : true});
		}
		this.mysql.connect(function(err) {
			if(err != null) {
				migration_Migration.print("Database Connection Error: " + err.toString(),"\x1B[0;31m");
				if(maxRetry < 1) {
					migration_Migration.print("Database Connection Error: Max retries reached.","\x1B[0;31m");
					onError("Max connection retries reached");
				}
				var _g = _gthis;
				var connection1 = connection;
				var onSuccess1 = onSuccess;
				var onError1 = onError;
				var maxRetry1 = maxRetry - 1;
				haxe_Timer.delay(function() {
					_g.connectDatabase(connection1,onSuccess1,onError1,maxRetry1);
				},2000);
				return;
			}
			migration_Migration.print("Database connected!","\x1B[0;32m");
			_gthis.support = new migration_MigrationSupport(_gthis.mysql);
			_gthis.runSupport(onSuccess,onError);
		});
	}
	,runSupport: function(onSuccess,onError) {
		var _g = this;
		var onSuccess1 = onSuccess;
		var onError1 = onError;
		var tmp = function() {
			_g.runGetState(onSuccess1,onError1);
		};
		this.support.runSetup(tmp,onError);
	}
	,runGetState: function(onSuccess,onError) {
		var _gthis = this;
		this.support.readCurrentState(this.migrationUUID,function(currentState,futureState) {
			_gthis.migrationCurrentState = currentState;
			_gthis.migrationFutureState = futureState;
			onSuccess();
		},onError);
	}
	,exit: function() {
		this.mysql.end();
		this.mysql = null;
	}
	,add: function(hash,sql) {
		this.data.push({ hash : hash, sql : sql});
	}
	,up: function(onSuccess,onFail) {
		try {
			this.filterStates();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			onFail(Std.string(e));
			return;
		}
		migration_Migration.print("Starting Migration...","\x1B[0;32m");
		this.runUp(onSuccess,onFail);
	}
	,runUp: function(onSuccess,onFail) {
		if(this.data.length == 0) {
			migration_Migration.print("Migration Done","\x1B[34m");
			onSuccess();
			return;
		}
		this.executeMigration(this.data.shift(),onSuccess,onFail);
	}
	,executeMigration: function(step,onSuccess,onError) {
		var _g = this;
		var onSuccess1 = onSuccess;
		var onFail = onError;
		var tmp = function() {
			_g.runUp(onSuccess1,onFail);
		};
		this.support.applyMigration(this.migrationUUID,step.hash,step.sql,tmp,onError);
	}
	,filterStates: function() {
		if(this.migrationCurrentState == null) {
			migration_Migration.print("First migration detected. Keeping all migration steps.","\x1B[0;33m");
			return;
		}
		var stateFound = false;
		while(!stateFound && this.data.length > 0) {
			if(this.migrationCurrentState != this.data[0].hash) {
				this.data.shift();
				continue;
			}
			if(this.migrationCurrentState == this.data[0].hash) {
				stateFound = true;
				this.data.shift();
				break;
			}
		}
		if(!stateFound) {
			migration_Migration.print("There is no migration step with hash " + this.migrationCurrentState + ".","\x1B[0;31m");
			throw haxe_Exception.thrown("Current migration step not found.");
		}
		if(this.data.length == 0) {
			migration_Migration.print("All migrations are already applied.","\x1B[0;32m");
			return;
		}
		var nextHash = this.data[0].hash;
		if(nextHash != this.migrationFutureState) {
			migration_Migration.print("Expected next hash is " + this.migrationFutureState + ",","\x1B[0;31m");
			migration_Migration.print("but next migration step is " + nextHash + ".","\x1B[0;31m");
			migration_Migration.print("Your last migration file may have been altered after being applied.","\x1B[0;31m");
			throw haxe_Exception.thrown("Wrong migration hash.");
		}
	}
	,__class__: migration_Migration
};
var migration_MigrationSupport = function(connection) {
	this.connection = connection;
};
migration_MigrationSupport.__name__ = true;
migration_MigrationSupport.prototype = {
	runSetup: function(onSuccess,onError) {
		migration_Migration.print("Running migration setup...","\x1B[0;32m");
		var query = "\n            CREATE DATABASE IF NOT EXISTS `acerola_mig` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;\n            CREATE TABLE IF NOT EXISTS `acerola_mig`.`mig` (\n                `uuid` CHAR(36) NOT NULL,\n                `current` VARCHAR(1024) NOT NULL,\n                `future` VARCHAR(1024) NOT NULL,\n                PRIMARY KEY (`uuid`)\n            )\n            ENGINE=InnoDB;\n        ";
		var callback = function(error,result) {
			if(error == null) {
				migration_Migration.print("Migration setup completed successfully.","\x1B[0;33m");
				onSuccess();
				return;
			}
			migration_Migration.print("Migration setup failed: " + error.message,"\x1B[0;31m");
			onError(error.message);
		};
		var autoJsonParse = null;
		this.connection.query({ sql : query, timeout : null},function(err,r,f) {
			if(err == null) {
				var result = new node_mysql_MysqlResultSet(r,f,autoJsonParse);
				callback(null,result);
			} else {
				callback(err,[]);
			}
		});
	}
	,readCurrentState: function(uuid,onSuccess,onError) {
		migration_Migration.print("Reading current migration state for " + (uuid == null ? "null" : util_kit_uuid_UUID.toString(uuid)),"\x1B[0;32m");
		var query = helper_maker_QueryMaker.make("\n                SELECT\n                    m.current,\n                    m.future\n                FROM acerola_mig.mig m\n                WHERE m.uuid = :uuid\n                ;\n            ",{ uuid : util_kit_uuid_UUID.toString(uuid)},($_=this.connection,$bind($_,$_.escape)));
		var callback = function(error,result) {
			if(error == null) {
				if(!result.hasNext()) {
					migration_Migration.print("Current Migration State: NONE","\x1B[0;33m");
					onSuccess(null,null);
					return;
				}
				var result1 = result.next();
				var currentState = result1.current;
				var futureState = result1.future;
				migration_Migration.print("Current Migration State: " + currentState,"\x1B[0;33m");
				onSuccess(currentState,futureState);
				return;
			}
			migration_Migration.print("Read current state failed: " + error.message,"\x1B[0;31m");
			onError(error.message);
		};
		var autoJsonParse = null;
		this.connection.query({ sql : query, timeout : null},function(err,r,f) {
			if(err == null) {
				var result = new node_mysql_MysqlResultSet(r,f,autoJsonParse);
				callback(null,result);
			} else {
				callback(err,[]);
			}
		});
	}
	,updateCurrentState: function(uuid,hash,futureHash,onSuccess,onError) {
		migration_Migration.print("" + hash + " -> Updating migration state","\x1B[0;35m");
		var query = helper_maker_QueryMaker.make("\n                INSERT INTO acerola_mig.mig (`uuid`, `current`, `future`)\n                VALUES (\n                    :uuid,\n                    :current,\n                    :future\n                )\n\n                ON DUPLICATE KEY UPDATE\n                    `current` = :current,\n                    `future` = :future\n                ;\n            ",{ uuid : util_kit_uuid_UUID.toString(uuid), current : hash, future : futureHash},($_=this.connection,$bind($_,$_.escape)));
		var callback = function(error,result) {
			if(error == null) {
				migration_Migration.print("" + hash + " -> Migration state updated","\x1B[0;35m");
				onSuccess();
				return;
			}
			migration_Migration.print("" + hash + " -> Update migration state failed: " + error.message,"\x1B[0;31m");
			onError(error.message);
		};
		var autoJsonParse = null;
		this.connection.query({ sql : query, timeout : null},function(err,r,f) {
			if(err == null) {
				var result = new node_mysql_MysqlResultSet(r,f,autoJsonParse);
				callback(null,result);
			} else {
				callback(err,[]);
			}
		});
	}
	,applyMigration: function(uuid,hash,sql,onSuccess,onError) {
		var _gthis = this;
		migration_Migration.print("Applying migration " + hash,"\x1B[0;32m");
		var callback = function(error,result) {
			if(error == null) {
				migration_Migration.print("" + hash + " -> Applied successfully","\x1B[0;35m");
				_gthis.updateCurrentState(uuid,hash,_gthis.generateHash(uuid,hash,sql),onSuccess,onError);
				return;
			}
			migration_Migration.print("" + hash + " -> Migration failed: " + error.message,"\x1B[0;31m");
			onError(error.message);
		};
		var autoJsonParse = null;
		this.connection.query({ sql : sql, timeout : null},function(err,r,f) {
			if(err == null) {
				var result = new node_mysql_MysqlResultSet(r,f,autoJsonParse);
				callback(null,result);
			} else {
				callback(err,[]);
			}
		});
	}
	,generateHash: function(uuid,lastHash,fileContent) {
		var hash = haxe_crypto_Sha1.encode(util_kit_uuid_UUID.toString(uuid) + lastHash + fileContent);
		return hash;
	}
	,__class__: migration_MigrationSupport
};
var sys_db_ResultSet = function() { };
sys_db_ResultSet.__name__ = true;
sys_db_ResultSet.__isInterface__ = true;
var node_mysql_MysqlResultSet = function(r,f,autoJsonParse) {
	this.__currentPosition = 0;
	this.autoJsonParse = autoJsonParse;
	this.__r = r;
	this.__f = f;
	this.__currentPosition = -1;
};
node_mysql_MysqlResultSet.__name__ = true;
node_mysql_MysqlResultSet.__interfaces__ = [sys_db_ResultSet];
node_mysql_MysqlResultSet.prototype = {
	performAutoJsonParse: function(row) {
		if(row == null || !this.autoJsonParse || this.__f == null) {
			return row;
		}
		if(this.__cache_json_fields == null) {
			this.__cache_json_fields = [];
			var _g = 0;
			var _g1 = this.__f;
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(field.type == 245) {
					this.__cache_json_fields.push(field.name);
				}
			}
		}
		var _g = 0;
		var _g1 = this.__cache_json_fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			try {
				var value = Reflect.field(row,field);
				if(value != null && typeof(value) == "string") {
					row[field] = JSON.parse(value);
				}
			} catch( _g2 ) {
			}
		}
		return row;
	}
	,clone: function() {
		return new node_mysql_MysqlResultSet(this.__r,this.__f,false);
	}
	,get_insertId: function() {
		return this.__r.insertId;
	}
	,get_insertIds: function() {
		var id = this.get_insertId();
		var result = [];
		var _g = 0;
		var _g1 = this.get_affectedRows() - this.get_changedRows();
		while(_g < _g1) {
			var i = _g++;
			result.push(id + i);
		}
		return result;
	}
	,get_affectedRows: function() {
		return this.__r.affectedRows;
	}
	,get_changedRows: function() {
		return this.__r.changedRows;
	}
	,get_length: function() {
		return this.__r.length;
	}
	,get_nfields: function() {
		return this.__f.length;
	}
	,hasNext: function() {
		if(this.get_length() == null || this.get_length() == 0) {
			return false;
		} else {
			return this.__currentPosition < this.get_length() - 1;
		}
	}
	,next: function() {
		this.__currentPosition++;
		return this.performAutoJsonParse(this.__r[this.__currentPosition]);
	}
	,results: function() {
		var l = new haxe_ds_List();
		var _g = 0;
		var _g1 = this.__r.length;
		while(_g < _g1) {
			var i = _g++;
			l.add(this.performAutoJsonParse(this.__r[i]));
		}
		return l;
	}
	,getResult: function(n) {
		return "";
	}
	,getIntResult: function(n) {
		return 0;
	}
	,getFloatResult: function(n) {
		return 0;
	}
	,getFieldsNames: function() {
		if(this.__f == null) {
			return null;
		} else {
			if(this.__cache_fields == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = this.__f;
				while(_g1 < _g2.length) {
					var f = _g2[_g1];
					++_g1;
					_g.push(f.name);
				}
				this.__cache_fields = _g;
			}
			return this.__cache_fields.slice();
		}
	}
	,__class__: node_mysql_MysqlResultSet
	,__properties__: {get_nfields:"get_nfields",get_length:"get_length",get_changedRows:"get_changedRows",get_affectedRows:"get_affectedRows",get_insertIds:"get_insertIds",get_insertId:"get_insertId"}
};
var terminal_Terminal = function() { };
terminal_Terminal.__name__ = true;
terminal_Terminal.colorizeRed = function(s) {
	return "" + "\x1B[0;31m" + s + "\x1B[0m";
};
terminal_Terminal.colorizeGreen = function(s) {
	return "" + "\x1B[0;32m" + s + "\x1B[0m";
};
terminal_Terminal.colorizeYellow = function(s) {
	return "" + "\x1B[0;33m" + s + "\x1B[0m";
};
terminal_Terminal.colorizeBlue = function(s) {
	return "" + "\x1B[34m" + s + "\x1B[0m";
};
terminal_Terminal.colorizeMagenta = function(s) {
	return "" + "\x1B[0;35m" + s + "\x1B[0m";
};
terminal_Terminal.colorizeCyan = function(s) {
	return "" + "\x1B[0;36m" + s + "\x1B[0m";
};
terminal_Terminal.printContext = function(context,message) {
	var v = "   " + context.toUpperCase() + " : " + message;
	process.stdout.write(Std.string(v));
	process.stdout.write("\n");
};
terminal_Terminal.print = function(s,color,breakLine) {
	if(breakLine == null) {
		breakLine = true;
	}
	if(color == null) {
		process.stdout.write(Std.string(s));
	} else {
		process.stdout.write(Std.string("" + color + s + "\x1B[0m"));
	}
	if(breakLine) {
		process.stdout.write("");
		process.stdout.write("\n");
	}
};
terminal_Terminal.printTitle = function(s,color) {
	var result = "\n\n" + s + "\n\n";
	terminal_Terminal.print(result,color);
};
terminal_Terminal.run = function(processPath,args,timeoutSeconds) {
	if(timeoutSeconds == null) {
		timeoutSeconds = 1.0;
	}
	var isDone = false;
	var exitCode = -1;
	var outp = new haxe_io_BytesOutput();
	var oute = new haxe_io_BytesOutput();
	var runProcess = function() {
		var loading = true;
		var $process = new sys.io.Process(processPath,args);
		while(loading) try {
			var current = $process.stdout.readAll(1024);
			outp.write(current);
			if(current.length == 0) {
				loading = false;
			}
		} catch( _g ) {
			loading = false;
		}
		exitCode = $process.exitCode();
		if(exitCode != 0 && $process.stderr != null) {
			oute.write($process.stderr.readAll());
		}
		$process.close();
		$process = null;
		isDone = true;
	};
	runProcess();
	if(exitCode != 0) {
		return { message : "Process failed", code : exitCode, output : outp.getBytes().toString(), out_err : oute.getBytes().toString()};
	} else {
		return { message : "Success", code : 0, output : outp.getBytes().toString(), out_err : null};
	}
};
var util_kit_uuid_UUID = {};
util_kit_uuid_UUID.__properties__ = {set_p1:"set_p1",get_p1:"get_p1"};
util_kit_uuid_UUID._new = function(hex) {
	if(hex == null) {
		hex = "00000000000000000000000000000000";
	}
	hex = hex.split("-").join("").toUpperCase();
	if(!util_kit_uuid_UUID.isValid(hex)) {
		throw haxe_Exception.thrown("Invalid UUID format");
	}
	var hex1 = hex.split("-").join("").toUpperCase();
	return hex1.substring(0,8) + "-" + hex1.substring(8,12) + "-" + hex1.substring(12,16) + "-" + hex1.substring(16,20) + "-" + hex1.substring(20,32);
};
util_kit_uuid_UUID.validate = function(this1,value) {
	if(!util_kit_uuid_UUID.isValid(value)) {
		throw haxe_Exception.thrown("Invalid UUID format");
	}
};
util_kit_uuid_UUID.create = function() {
	return util_kit_uuid_UUID._new();
};
util_kit_uuid_UUID.createRandom = function() {
	return util_kit_uuid_UUID._new(helper_kits_StringKit.generateRandomHex(16));
};
util_kit_uuid_UUID.toString = function(this1) {
	var hex = this1.split("-").join("").toUpperCase();
	return hex.substring(0,8) + "-" + hex.substring(8,12) + "-" + hex.substring(12,16) + "-" + hex.substring(16,20) + "-" + hex.substring(20,32);
};
util_kit_uuid_UUID.fromString = function(value) {
	return util_kit_uuid_UUID._new(value);
};
util_kit_uuid_UUID.get_p1 = function(this1) {
	var hex = HxOverrides.substr(this1,0,8);
	return Std.parseInt("0x" + hex);
};
util_kit_uuid_UUID.set_p1 = function(this1,value) {
	this1 = StringTools.hex(value,8) + this1.substring(8);
	return value;
};
util_kit_uuid_UUID.isValid = function(value) {
	var r = new EReg("^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$","");
	return r.match(value);
};
util_kit_uuid_UUID.reformat = function(this1,value) {
	var hex = value.split("-").join("").toUpperCase();
	return hex.substring(0,8) + "-" + hex.substring(8,12) + "-" + hex.substring(12,16) + "-" + hex.substring(16,20) + "-" + hex.substring(20,32);
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
DateTools.DAYS_OF_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];
anonstruct_AnonMessages.NULL_VALUE_NOT_ALLOWED = "Value cannot be null";
anonstruct_AnonMessages.DATE_VALUE_INVALID = "Value must be a valid date";
anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE = "Value must be before ?VALUE0";
anonstruct_AnonMessages.DATE_VALUE_MUST_BE_BEFORE_OR_EQUAL = "Value must be before or equal ?VALUE0";
anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER = "Value must be after ?VALUE0";
anonstruct_AnonMessages.DATE_VALUE_MUST_BE_AFTER_OR_EQUAL = "Value must be after or equal ?VALUE0";
anonstruct_AnonMessages.ARRAY_VALUE_INVALID = "Value must be an array";
anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_SINGLE = "Value must have at least 1 item";
anonstruct_AnonMessages.ARRAY_VALUE_MIN_ITEM_PLURAL = "Value must have at least ?VALUE0 items";
anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_SINGLE = "Value must have at most 1 item";
anonstruct_AnonMessages.ARRAY_VALUE_MAX_ITEM_PLURAL = "Value must have at most ?VALUE0 items";
anonstruct_AnonMessages.STRING_VALUE_INVALID = "Value must be a string";
anonstruct_AnonMessages.STRING_VALUE_CANNOT_BE_EMPTY = "Value cannot be empty";
anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_SINGLE = "Value must have at least 1 character";
anonstruct_AnonMessages.STRING_VALUE_MIN_CHAR_PLURAL = "Value must have at least ?VALUE0 characters";
anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_SINGLE = "Value must have at most 1 character";
anonstruct_AnonMessages.STRING_VALUE_MAX_CHAR_PLURAL = "Value must have at most ?VALUE0 characters";
anonstruct_AnonMessages.STRING_VALUE_SHOULD_STARTS_WITH = "Value should starts with ?VALUE0";
anonstruct_AnonMessages.STRING_VALUE_SHOULD_ENDS_WITH = "Value should ends with ?VALUE0";
anonstruct_AnonMessages.STRING_VALUE_CHAR_NOT_ALLOWED = "Character '?VALUE0' not allowed";
anonstruct_AnonMessages.STRING_VALUE_OPTION_NOT_ALLOWED = "Value '?VALUE0' is not allowed. Accepted values: ?VALUE1";
anonstruct_AnonMessages.INT_VALUE_INVALID = "Value must be an int number";
anonstruct_AnonMessages.INT_VALUE_GREATER_THAN = "Value must be greater than ?VALUE0";
anonstruct_AnonMessages.INT_VALUE_GREATER_OR_EQUAL_THAN = "Value must be greater or equal than ?VALUE0";
anonstruct_AnonMessages.INT_VALUE_LESS_THAN = "Value must be less than ?VALUE0";
anonstruct_AnonMessages.INT_VALUE_LESS_OR_EQUAL_THAN = "Value must me less or equal than ?VALUE0";
anonstruct_AnonMessages.FLOAT_VALUE_INVALID = "Value must be a number";
anonstruct_AnonMessages.FLOAT_VALUE_GREATER_THAN = "Value must be greater than ?VALUE0";
anonstruct_AnonMessages.FLOAT_VALUE_GREATER_OR_EQUAL_THAN = "Value must be greater or equal than ?VALUE0";
anonstruct_AnonMessages.FLOAT_VALUE_LESS_THAN = "Value must be less than ?VALUE0";
anonstruct_AnonMessages.FLOAT_VALUE_LESS_OR_EQUAL_THAN = "Value must be less or equal than ?VALUE0";
anonstruct_AnonMessages.BOOL_VALUE_INVALID = "Value must be a bool";
anonstruct_AnonMessages.BOOL_VALUE_EXPECTED = "Value should be ?VALUE0";
anonstruct_AnonMessages.OBJECT_VALUE_INVALID = "Value must be an object";
anonstruct_AnonMessages.FUNCTION_VALUE_INVALID = "Value must be a function";
datetime_DateTime.UNIX_EPOCH_DIFF = 62135596800.0;
datetime_DateTime.SECONDS_IN_MINUTE = 60;
datetime_DateTime.SECONDS_IN_HOUR = 3600;
datetime_DateTime.SECONDS_IN_DAY = 86400;
datetime_DateTime.SECONDS_IN_WEEK = 604800;
datetime_DateTime.SECONDS_IN_YEAR = 31536000;
datetime_DateTime.SECONDS_IN_LEAP_YEAR = 31622400;
datetime_DateTime.SECONDS_IN_3_YEARS = 94608000;
datetime_DateTime.SECONDS_IN_QUAD = 126230400.0;
datetime_DateTime.SECONDS_IN_HALF_QUAD = 63072000.0;
datetime_DateTime.SECONDS_IN_HALF_QUAD_LEAP = 63158400.0;
datetime_DateTime.SECONDS_IN_3_PART_QUAD = 94694400.0;
datetime_DateTime.SECONDS_IN_CQUAD = 12622780800.0;
datetime_DateTime.SECONDS_IN_CENTURY = 3155673600.0;
datetime_DateTime.SECONDS_IN_LEAP_CENTURY = 3155760000.0;
helper_kits_StringKit.STRIP_A = ["á","à","ã","â","ä"];
helper_kits_StringKit.STRIP_E = ["é","è","ë","ê"];
helper_kits_StringKit.STRIP_I = ["í","ì","ï"];
helper_kits_StringKit.STRIP_O = ["ó","ò","õ","ö","ô"];
helper_kits_StringKit.STRIP_U = ["ú","ù","ü","û"];
helper_kits_StringKit.STRIP_C = ["ç"];
acerola_mig_MigRunner.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
